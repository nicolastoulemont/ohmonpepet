/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { ApiContext } from "./../config/context"
import type { FieldValidationResolver, FieldAuthorizationResolver } from "./plugins"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JWT";
    /**
     * A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
     */
    latitude<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Latitude";
    /**
     * A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
     */
    longitude<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Longitude";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "URL";
    /**
     * A field whose value must be either: user, operator, staff
     */
    saveAs<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "SaveAsValue";
    /**
     * A field whose value must be either: USER, OPERATOR
     */
    source<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "SourceValue";
    /**
     * Floats that will have a value greater than 0.
     */
    positiveFloat<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PositiveFloat";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JWT";
    /**
     * A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
     */
    latitude<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Latitude";
    /**
     * A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
     */
    longitude<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Longitude";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "URL";
    /**
     * A field whose value must be either: user, operator, staff
     */
    saveAs<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "SaveAsValue";
    /**
     * A field whose value must be either: USER, OPERATOR
     */
    source<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "SourceValue";
    /**
     * Floats that will have a value greater than 0.
     */
    positiveFloat<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PositiveFloat";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BookingWithPaymentStatusInput: { // input type
    paymentStatus?: string | null; // String
    underReview?: boolean | null; // Boolean
  }
  CancelBookingInput: { // input type
    canceledReason?: string | null; // String
    id: string; // ID!
    source: NexusGenScalars['SourceValue']; // SourceValue!
  }
  CancelOnGoingBookingInput: { // input type
    canceledReason: string; // String!
    id: string; // ID!
    source: NexusGenScalars['SourceValue']; // SourceValue!
  }
  ConfirmBookingInput: { // input type
    id: string; // ID!
    source: NexusGenScalars['SourceValue']; // SourceValue!
  }
  CreateAccountInput: { // input type
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    firstName: string; // String!
    password: string; // String!
  }
  CreateBookingAdInput: { // input type
    animalsSpeciesIds: string[]; // [String!]!
    description?: string | null; // String
    endDate: string; // String!
    latitude: NexusGenScalars['Latitude']; // Latitude!
    longitude: NexusGenScalars['Longitude']; // Longitude!
    serviceMaxPrice?: number | null; // Float
    serviceOptionId: string; // String!
    startDate: string; // String!
  }
  CreateBookingClaimInput: { // input type
    bookingId: string; // String!
    reason: string; // String!
    saveAs: NexusGenScalars['SaveAsValue']; // SaveAsValue!
  }
  CreateBookingInput: { // input type
    animalsIds: string[]; // [String!]!
    endDate: string; // String!
    message?: string | null; // String
    operatorId: string; // ID!
    selectedOptions?: Array<NexusGenScalars['JSON'] | null> | null; // [JSON]
    serviceOptionId: string; // ID!
    startDate: string; // String!
  }
  CreateBookingMessageInput: { // input type
    bookingId: string; // String!
    content: string; // String!
    saveAs: string; // String!
  }
  CreateDonationReceiptInput: { // input type
    amountDonated: number; // Float!
    donationsIds: Array<string | null>; // [ID]!
    filesUrls: Array<NexusGenScalars['URL'] | null>; // [URL]!
    partnerId: string; // ID!
  }
  CreateGenderOptionInput: { // input type
    nameEn: string; // String!
    nameFr: string; // String!
  }
  CreateHostingOptionInput: { // input type
    nameEn: string; // String!
    nameFr: string; // String!
  }
  CreateIndividualOperatorInput: { // input type
    acceptedSpecieOptionsIds: string[]; // [ID!]!
    birthDate: NexusGenScalars['Date']; // Date!
    description: string; // String!
    genderOptionId: string; // String!
    hostingOptionId: string; // String!
    languageOptionIds: string[]; // [ID!]!
    mainMediaId: string; // ID!
    ownAnimalsSpecieOptionsIds: string[]; // [ID!]!
    partnerId?: string | null; // String
    partnerPercentage?: number | null; // Int
    stripeAccountId?: string | null; // ID
  }
  CreateInvidualOperatorCoreServicesInput: { // input type
    price: number; // Int!
    serviceOptionId: string; // ID!
  }
  CreateLanguageOptionInput: { // input type
    mediaId: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
  }
  CreateMediaInput: { // input type
    fileName: string; // String!
    fileType: string; // String!
    saveAs: string; // String!
  }
  CreateOperatorAvailabilityInput: { // input type
    date: NexusGenScalars['Date']; // Date!
  }
  CreatePartnerInput: { // input type
    description: string; // String!
    name: string; // String!
    storeUrls: string[]; // [String!]!
    websiteUrl: string; // String!
  }
  CreateReviewInput: { // input type
    body?: string | null; // String
    bookingId: string; // String!
    saveAs: string; // String!
    score: NexusGenScalars['PositiveFloat']; // PositiveFloat!
    title: string; // String!
  }
  CreateServiceOptionInput: { // input type
    nameEn: string; // String!
    nameFr: string; // String!
  }
  CreateSpecieOptionInput: { // input type
    nameEn: string; // String!
    nameFr: string; // String!
  }
  CreateStaffAccountInput: { // input type
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    password: string; // String!
    phoneNumber: string; // String!
  }
  CurrentUserBookingFilterInput: { // input type
    endDate?: NexusGenScalars['Date'] | null; // Date
    includeFinished?: boolean | null; // Boolean
    serviceOptionId?: string | null; // ID
    sortKey?: string | null; // String
    sortValue?: string | null; // String
    startDate?: NexusGenScalars['Date'] | null; // Date
  }
  EmailAndPasswordInput: { // input type
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    password: string; // String!
  }
  InvidualOperatorExtraServicesInput: { // input type
    abilityToProvideMedicalCare?: boolean | null; // Boolean
    acceptShortNotice?: boolean | null; // Boolean
    atHomeComeGetPet?: boolean | null; // Boolean
    atHomeComeGetPetExtraPrice?: number | null; // Int
    atHomeContinuously?: boolean | null; // Boolean
    atHomeContinuouslyExtraPrice?: number | null; // Int
    atHomeExclusivity?: boolean | null; // Boolean
    atHomeExlusivityExtraPrice?: number | null; // Int
    atHomeOnlyBringPet?: boolean | null; // Boolean
    atHomeOnlyBringPetExtraPrice?: number | null; // Int
    atOwnerHomeCurtains?: boolean | null; // Boolean
    atOwnerHomeCurtainsExtraPrice?: number | null; // Int
    atOwnerHomeMail?: boolean | null; // Boolean
    atOwnerHomeMailExtraPrice?: number | null; // Int
    atOwnerHomePlantsCare?: boolean | null; // Boolean
    atOwnerHomePlantsCareExtraPrice?: number | null; // Int
    flexibleCancelation?: boolean | null; // Boolean
    isProfessionalOperator?: boolean | null; // Boolean
  }
  ResetPasswordInput: { // input type
    newPassword: string; // String!
    token: NexusGenScalars['JWT']; // JWT!
  }
  SearchAdsInput: { // input type
    acceptedAnimalsIds: string[]; // [ID!]!
    latitude: NexusGenScalars['Latitude']; // Latitude!
    longitude: NexusGenScalars['Longitude']; // Longitude!
    maxDistanceInKms: number | null; // Float
    serviceOptionIds?: string[] | null; // [String!]
  }
  SearchDonationReceiptsInput: { // input type
    endDate?: NexusGenScalars['Date'] | null; // Date
    partnerId?: string | null; // String
    startDate?: NexusGenScalars['Date'] | null; // Date
  }
  SearchDonationsInput: { // input type
    donated?: boolean | null; // Boolean
    endDate?: NexusGenScalars['Date'] | null; // Date
    partnerId?: string | null; // String
    startDate?: NexusGenScalars['Date'] | null; // Date
  }
  SearchOperatorsInput: { // input type
    abilityToProvideMedicalCare?: boolean | null; // Boolean
    acceptShortNotice?: boolean | null; // Boolean
    acceptedSpecieOptionsIds?: string[] | null; // [ID!]
    atHomeComeGetPet?: boolean | null; // Boolean
    atHomeContinuously?: boolean | null; // Boolean
    atHomeExclusivity?: boolean | null; // Boolean
    atHomeOnlyBringPet?: boolean | null; // Boolean
    atOwnerHomeCurtains?: boolean | null; // Boolean
    atOwnerHomeMail?: boolean | null; // Boolean
    atOwnerHomePlantsCare?: boolean | null; // Boolean
    endDate: NexusGenScalars['Date']; // Date!
    flexibleCancelation?: boolean | null; // Boolean
    genderOptionId?: string[] | null; // [String!]
    hostingOptionId?: string[] | null; // [String!]
    isProfessionalOperator?: boolean | null; // Boolean
    languageOptionIds?: string[] | null; // [ID!]
    latitude: NexusGenScalars['Latitude']; // Latitude!
    longitude: NexusGenScalars['Longitude']; // Longitude!
    maxDistanceInKms: number | null; // Float
    ownAnimalsSpecieOptionsIds?: string[] | null; // [ID!]
    score?: number | null; // Float
    serviceMaxPrice?: number | null; // Float
    serviceOptionId?: string | null; // String
    startDate: NexusGenScalars['Date']; // Date!
  }
  SearchPartnersInput: { // input type
    query: string; // String!
  }
  SetBookingMessagesAsReadInput: { // input type
    ids: string[]; // [ID!]!
    readAt?: NexusGenScalars['Date'] | null; // Date
  }
  UpdateBookingAdInput: { // input type
    animalsSpeciesIds: string[]; // [String!]!
    description?: string | null; // String
    endDate: string; // String!
    latitude: NexusGenScalars['Latitude']; // Latitude!
    longitude: NexusGenScalars['Longitude']; // Longitude!
    serviceMaxPrice?: number | null; // Float
    serviceOptionId: string; // String!
    startDate: string; // String!
  }
  UpdateBookingMessageInput: { // input type
    content: string; // String!
    readAt?: NexusGenScalars['Date'] | null; // Date
  }
  UpdateBookingPaymentStatusInput: { // input type
    id: string; // ID!
    paymentMethodId?: string | null; // String
  }
  UpdateDonationReceiptInput: { // input type
    amountDonated: number; // Float!
    donationsIds: Array<string | null>; // [ID]!
    filesUrls: Array<NexusGenScalars['URL'] | null>; // [URL]!
    id: string; // ID!
    partnerId: string; // ID!
  }
  UpdateGenderOptionInput: { // input type
    nameEn?: string | null; // String
    nameFr?: string | null; // String
  }
  UpdateHostingOptionInput: { // input type
    nameEn?: string | null; // String
    nameFr?: string | null; // String
  }
  UpdateIndividualOperatorInput: { // input type
    acceptedSpecieOptionsIds?: Array<string | null> | null; // [ID]
    birthDate?: NexusGenScalars['Date'] | null; // Date
    description?: string | null; // String
    genderOptionId?: string | null; // String
    hostingOptionId?: string | null; // String
    languageOptionIds?: Array<string | null> | null; // [ID]
    mainMediaId?: string | null; // ID
    ownAnimalsSpecieOptionsIds?: Array<string | null> | null; // [ID]
    partnerId?: string | null; // String
    partnerPercentage?: number | null; // Int
    stripeAccountId?: string | null; // ID
  }
  UpdateInvidualOperatorCoreServicesInput: { // input type
    coreOperatorServiceId: string; // ID!
    price: number; // Int!
    serviceOptionId: string; // ID!
  }
  UpdateLanguageOptionInput: { // input type
    mediaId?: string | null; // ID
    nameEn?: string | null; // String
    nameFr?: string | null; // String
  }
  UpdatePartnerInput: { // input type
    description: string; // String!
    name: string; // String!
    storeUrls: string[]; // [String!]!
    websiteUrl: string; // String!
  }
  UpdateReviewInput: { // input type
    body?: string | null; // String
    score: NexusGenScalars['PositiveFloat']; // PositiveFloat!
    title: string; // String!
  }
  UpdateServiceOptionInput: { // input type
    nameEn?: string | null; // String
    nameFr?: string | null; // String
  }
  UpdateSpecieOptionInput: { // input type
    nameEn?: string | null; // String
    nameFr?: string | null; // String
  }
  VerifyUserInput: { // input type
    token: NexusGenScalars['JWT']; // JWT!
  }
}

export interface NexusGenEnums {
  BookingStatus: "BOTH_CONFIRMED" | "CANCELED" | "NONE_CONFIRMED" | "PAID" | "PAYMENT_AUTHORIZED" | "PENDING_OWNER_VALIDATION" | "PENDING_SITTER_VALIDATION" | "UNDER_REVIEW"
  ErrorCode: "BAD_REQUEST" | "FORBIDDEN" | "NOT_FOUND" | "UNABLE_TO_PROCESS" | "UNAUTHORIZED"
  ErrorMessage: "FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE" | "RESOURCE_NOT_FOUND" | "UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR" | "UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR" | "UNAUTHENTICATED_PLEASE_LOGIN"
  MediaType: "IMAGE" | "VIDEO"
  PaymentStatus: "AUTHORIZED_BUT_CANCELLED" | "AUTHORIZED_REQUIRE_CAPTURE" | "CAPTURED_AND_PAID" | "ERROR_SENDING_AUTH_REQUIRED_MAIL" | "ERROR_SENDING_INSUFFICIENT_FUNDS_MAIL" | "ERROR_SENDING_UNKOWN_ERROR_MAIL" | "FAILED_CAPTURE" | "FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED" | "FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED_MAIL_SENT" | "FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS" | "FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS_MAIL_SENT" | "FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR" | "FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR_MAIL_SENT" | "PENDING_AUTHORIZATION" | "SETUP_INTENT_CONFIRMED_REQUIRED_PAYMENT_INTENT_CREATION" | "SETUP_INTENT_PENDING_CONFIRMATION"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
  DateTime: Date
  EmailAddress: string
  JSON: any
  JWT: string
  Latitude: number
  Longitude: number
  PositiveFloat: number
  SaveAsValue: 'user' | 'operator' | 'staff'
  SourceValue: 'USER' | 'OPERATOR'
  URL: string
}

export interface NexusGenObjects {
  Account: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    verifiedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AccountsList: { // root type
    accounts?: Array<NexusGenRootTypes['Account'] | null> | null; // [Account]
  }
  AuthorizedPayment: { // root type
    clientSecret?: string | null; // String
    hadRef?: boolean | null; // Boolean
    stripeTargetApi?: string | null; // String
  }
  Booking: { // root type
    animalsIds?: Array<string | null> | null; // [ID]
    applictionFeeAmount?: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    canceled?: boolean | null; // Boolean
    canceledBy?: string | null; // String
    canceledReason?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    endDate?: NexusGenScalars['Date'] | null; // Date
    id: string; // String!
    operatorConfirmationDate?: NexusGenScalars['DateTime'] | null; // DateTime
    ownerConfirmationDate?: NexusGenScalars['DateTime'] | null; // DateTime
    paid?: boolean | null; // Boolean
    priceWithOutApplicationFee?: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    selectedOptions?: Array<NexusGenScalars['JSON'] | null> | null; // [JSON]
    startDate?: NexusGenScalars['Date'] | null; // Date
    underReview?: boolean | null; // Boolean
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  BookingAd: { // root type
    animalsSpeciesIds: string[]; // [String!]!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    endDate?: NexusGenScalars['Date'] | null; // Date
    id: string; // String!
    serviceMaxPrice?: number | null; // Float
    serviceOptionId: string; // String!
    startDate?: NexusGenScalars['Date'] | null; // Date
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  BookingAdBid: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  BookingAdBids: { // root type
    bids?: Array<NexusGenRootTypes['BookingAdBid'] | null> | null; // [BookingAdBid]
  }
  BookingAds: { // root type
    bookingAds?: Array<NexusGenRootTypes['BookingAd'] | null> | null; // [BookingAd]
  }
  BookingMessagesList: { // root type
    bookingMessages?: Array<NexusGenRootTypes['BookingMessage'] | null> | null; // [BookingMessage]
  }
  BookingsList: { // root type
    bookings?: Array<NexusGenRootTypes['Booking'] | null> | null; // [Booking]
  }
  BooleanResult: { // root type
    success?: boolean | null; // Boolean
  }
  CannotBookHimSelfError: { // root type
    cannotBookHimSelfError?: string | null; // String
  }
  ClaimsList: { // root type
    claims?: Array<NexusGenRootTypes['Claim'] | null> | null; // [Claim]
  }
  CronStatus: { // root type
    status?: string | null; // String
  }
  Donation: { // root type
    amountToDonate?: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DonationReceipt: { // root type
    amountDonated?: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DonationReceiptMedia: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    donationReceiptId?: string | null; // ID
    id: string; // String!
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DonationReceiptsList: { // root type
    donationReceipts?: Array<NexusGenRootTypes['DonationReceipt'] | null> | null; // [DonationReceipt]
  }
  DonationsList: { // root type
    donations?: Array<NexusGenRootTypes['Donation'] | null> | null; // [Donation]
  }
  ExistingBookingError: { // root type
    existingBookingError?: string | null; // String
  }
  GenderOption: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  GenderOptionsList: { // root type
    genderOptions?: Array<NexusGenRootTypes['GenderOption'] | null> | null; // [GenderOption]
  }
  HostingOption: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  HostingOptionsList: { // root type
    hostingOptions?: Array<NexusGenRootTypes['HostingOption'] | null> | null; // [HostingOption]
  }
  IndividualOperator: { // root type
    acceptedSpecieOptionsIds?: Array<string | null> | null; // [String]
    accountId?: string | null; // ID
    birthDate?: NexusGenScalars['Date'] | null; // Date
    calendarUpdate?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    hostingOptionId?: string | null; // String
    id: string; // String!
    languageOptionIds?: Array<string | null> | null; // [String]
    mainMediaId?: string | null; // String
    ownAnimalsSpecieOptionsIds?: Array<string | null> | null; // [String]
    partnerId?: string | null; // String
    partnerPercentage?: number | null; // Int
    stripeAccountId?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  IndividualOperatorCoreService: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    price: number; // Int!
    serviceOptionId: string; // ID!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  IndividualOperatorExtraService: { // root type
    abilityToProvideMedicalCare?: boolean | null; // Boolean
    acceptShortNotice?: boolean | null; // Boolean
    atHomeComeGetPet?: boolean | null; // Boolean
    atHomeComeGetPetExtraPrice?: number | null; // Int
    atHomeContinuously?: boolean | null; // Boolean
    atHomeContinuouslyExtraPrice?: number | null; // Int
    atHomeExclusivity?: boolean | null; // Boolean
    atHomeExlusivityExtraPrice?: number | null; // Int
    atHomeOnlyBringPet?: boolean | null; // Boolean
    atHomeOnlyBringPetExtraPrice?: number | null; // Int
    atOwnerHomeCurtains?: boolean | null; // Boolean
    atOwnerHomeCurtainsExtraPrice?: number | null; // Int
    atOwnerHomeMail?: boolean | null; // Boolean
    atOwnerHomeMailExtraPrice?: number | null; // Int
    atOwnerHomePlantsCare?: boolean | null; // Boolean
    atOwnerHomePlantsCareExtraPrice?: number | null; // Int
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    flexibleCancelation?: boolean | null; // Boolean
    id: string; // String!
    isProfessionalOperator?: boolean | null; // Boolean
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  InvalidArgument: { // root type
    key: string; // String!
    message: string; // String!
  }
  InvalidArgumentsError: { // root type
    invalidArguments: Array<NexusGenRootTypes['InvalidArgument'] | null>; // [InvalidArgument]!
  }
  InvalidOperatorError: { // root type
    invalidOperatorError?: string | null; // String
  }
  IsActiveOperatorMainMediaError: { // root type
    activeOperatorMainMediaError: string; // String!
  }
  IsActiveOperatorWithNoReplacementMediaError: { // root type
    activeOperatorWithNoReplacementMediaError: string; // String!
  }
  LanguageOption: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  LanguageOptionMedia: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    languageOptionId?: string | null; // ID
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  LanguageOptionsList: { // root type
    languageOptions?: Array<NexusGenRootTypes['LanguageOption'] | null> | null; // [LanguageOption]
  }
  Location: { // root type
    address?: string | null; // String
    country?: string | null; // String
    country_code?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    latitude: NexusGenScalars['Latitude']; // Latitude!
    longitude: NexusGenScalars['Longitude']; // Longitude!
    postcode?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  MediasList: { // root type
    medias?: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
  }
  MessageMedia: { // root type
    bookingMessageId?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: {};
  NotFoundError: {};
  NotSupportedExtraServiceError: { // root type
    notSupportedExtraServiceError?: string | null; // String
  }
  OperatorAvailability: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    date?: NexusGenScalars['Date'] | null; // Date
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorBookingMessage: { // root type
    content: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operatorId?: string | null; // ID
    readAt?: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorCannotProcessPaymentsError: { // root type
    operatorCannotProcessPaymentsError?: string | null; // String
  }
  OperatorClaim: { // root type
    bookingId: string; // ID!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operatorId?: string | null; // ID
    reason: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorMedia: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    operatorId?: string | null; // ID
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorReview: { // root type
    body?: string | null; // String
    bookingId?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operatorId?: string | null; // ID
    score: number; // Float!
    title: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Operators: { // root type
    operators?: Array<NexusGenRootTypes['IndividualOperator'] | null> | null; // [IndividualOperator]
  }
  Partner: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description: string; // String!
    id: string; // String!
    name: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    websiteUrl: string; // String!
  }
  PartnerMedia: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    partnerId?: string | null; // ID
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PartnersList: { // root type
    partners?: Array<NexusGenRootTypes['Partner'] | null> | null; // [Partner]
  }
  PaymentProcessorError: { // root type
    paymentProcessorError?: string | null; // String
  }
  PreExistingOperatorBidError: { // root type
    preExistingOperatorBidError?: string | null; // String
  }
  PreExistingUserAdError: { // root type
    preExistingUserAdError?: string | null; // String
  }
  Query: {};
  ReviewsList: { // root type
    reviews?: Array<NexusGenRootTypes['Review'] | null> | null; // [Review]
  }
  ServiceOption: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  ServiceOptionsList: { // root type
    serviceOptions?: Array<NexusGenRootTypes['ServiceOption'] | null> | null; // [ServiceOption]
  }
  SharedMedia: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    operatorId?: string | null; // ID
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId?: string | null; // ID
  }
  SpecieOption: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  SpecieOptionsList: { // root type
    specieOptions?: Array<NexusGenRootTypes['SpecieOption'] | null> | null; // [SpecieOption]
  }
  Staff: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    id: string; // String!
    phoneNumber?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  StaffsList: { // root type
    staffs?: Array<NexusGenRootTypes['Staff'] | null> | null; // [Staff]
  }
  StorageInfos: { // root type
    mediaId: string; // ID!
    signedRequest?: string | null; // String
    url?: string | null; // String
  }
  StripePayment: { // root type
    bookingId?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    errorCode?: string | null; // String
    id: string; // String!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Subscription: {};
  UnableToProcessError: {};
  User: { // root type
    accountId?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    firstName: string; // String!
    id: string; // String!
    lastName?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  UserAuthenticationError: {};
  UserBookingMessage: { // root type
    content: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    readAt?: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId?: string | null; // ID
  }
  UserClaim: { // root type
    bookingId: string; // ID!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    reason: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId?: string | null; // ID
  }
  UserForbiddenError: {};
  UserMedia: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType?: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId?: string | null; // ID
  }
  UserReview: { // root type
    body?: string | null; // String
    bookingId?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    score: number; // Float!
    title: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId?: string | null; // ID
  }
  UsersList: { // root type
    users?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
}

export interface NexusGenInterfaces {
  Actor: NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['User'];
  BookingMessage: NexusGenRootTypes['OperatorBookingMessage'] | NexusGenRootTypes['UserBookingMessage'];
  Claim: NexusGenRootTypes['OperatorClaim'] | NexusGenRootTypes['UserClaim'];
  Media: NexusGenRootTypes['DonationReceiptMedia'] | NexusGenRootTypes['LanguageOptionMedia'] | NexusGenRootTypes['MessageMedia'] | NexusGenRootTypes['OperatorMedia'] | NexusGenRootTypes['PartnerMedia'] | NexusGenRootTypes['SharedMedia'] | NexusGenRootTypes['UserMedia'];
  Node: NexusGenRootTypes['Account'] | NexusGenRootTypes['Booking'] | NexusGenRootTypes['BookingAd'] | NexusGenRootTypes['BookingAdBid'] | NexusGenRootTypes['Donation'] | NexusGenRootTypes['DonationReceipt'] | NexusGenRootTypes['DonationReceiptMedia'] | NexusGenRootTypes['GenderOption'] | NexusGenRootTypes['HostingOption'] | NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['IndividualOperatorCoreService'] | NexusGenRootTypes['IndividualOperatorExtraService'] | NexusGenRootTypes['LanguageOption'] | NexusGenRootTypes['LanguageOptionMedia'] | NexusGenRootTypes['Location'] | NexusGenRootTypes['MessageMedia'] | NexusGenRootTypes['OperatorAvailability'] | NexusGenRootTypes['OperatorBookingMessage'] | NexusGenRootTypes['OperatorClaim'] | NexusGenRootTypes['OperatorMedia'] | NexusGenRootTypes['OperatorReview'] | NexusGenRootTypes['Partner'] | NexusGenRootTypes['PartnerMedia'] | NexusGenRootTypes['ServiceOption'] | NexusGenRootTypes['SharedMedia'] | NexusGenRootTypes['SpecieOption'] | NexusGenRootTypes['Staff'] | NexusGenRootTypes['StripePayment'] | NexusGenRootTypes['User'] | NexusGenRootTypes['UserBookingMessage'] | NexusGenRootTypes['UserClaim'] | NexusGenRootTypes['UserMedia'] | NexusGenRootTypes['UserReview'];
  Operator: NexusGenRootTypes['IndividualOperator'];
  Payment: NexusGenRootTypes['StripePayment'];
  Review: NexusGenRootTypes['OperatorReview'] | NexusGenRootTypes['UserReview'];
}

export interface NexusGenUnions {
  AccountByIdResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  AccountResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  AdByIdResult: NexusGenRootTypes['BookingAd'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'];
  AllAccountsResult: NexusGenRootTypes['AccountsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  AllOperatorsResult: NexusGenRootTypes['Operators'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  AllStaffsResult: NexusGenRootTypes['StaffsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  AllUsersResult: NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'] | NexusGenRootTypes['UsersList'];
  AuthorizePaymentResult: NexusGenRootTypes['AuthorizedPayment'] | NexusGenRootTypes['InvalidOperatorError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorCannotProcessPaymentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  BidForBookingAdResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  BookingByIdResult: NexusGenRootTypes['Booking'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'];
  BookingMessageByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorBookingMessage'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserBookingMessage'] | NexusGenRootTypes['UserForbiddenError'];
  BookingMessageSubscriptionResult: NexusGenRootTypes['OperatorBookingMessage'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserBookingMessage'] | NexusGenRootTypes['UserForbiddenError'];
  BookingMessagesResult: NexusGenRootTypes['BookingMessagesList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  BookingPayment: NexusGenRootTypes['StripePayment'];
  BookingSubscriptionResult: NexusGenRootTypes['Booking'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  BookingWithPaymentStatusResult: NexusGenRootTypes['BookingsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  BookingsResult: NexusGenRootTypes['BookingsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CancelBookingResult: NexusGenRootTypes['Booking'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CancelOnGoingBookingResult: NexusGenRootTypes['Booking'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  ClaimByIdResult: NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorClaim'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserClaim'] | NexusGenRootTypes['UserForbiddenError'];
  ClaimsResult: NexusGenRootTypes['ClaimsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  ConfirmBookingResult: NexusGenRootTypes['Booking'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CreateAccountResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'];
  CreateBookingAdResult: NexusGenRootTypes['BookingAd'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['PreExistingUserAdError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CreateBookingClaimResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['OperatorClaim'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserClaim'];
  CreateBookingMessageResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['OperatorBookingMessage'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserBookingMessage'];
  CreateBookingResult: NexusGenRootTypes['Booking'] | NexusGenRootTypes['CannotBookHimSelfError'] | NexusGenRootTypes['ExistingBookingError'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['NotSupportedExtraServiceError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CreateDonationReceiptResult: NexusGenRootTypes['DonationReceipt'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateGenderOptionResult: NexusGenRootTypes['GenderOption'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateHostingOptionResult: NexusGenRootTypes['HostingOption'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateIndividualOperatorResult: NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'];
  CreateInvidualOperatorCoreServicesResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CreateInvidualOperatorExtraServicesResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CreateLanguageOptionResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['LanguageOption'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateMediaResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['StorageInfos'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateOperatorAvailabilityResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  CreatePartnerResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['Partner'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateReviewResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['OperatorReview'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserReview'];
  CreateServiceOptionResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['ServiceOption'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateSpecieOptionResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['SpecieOption'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CreateStaffAccountResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'];
  CronSubscriptionsResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CurrentAccountResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CurrentOperatorDonationsResult: NexusGenRootTypes['DonationsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CurrentOperatorMediaResult: NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorMedia'] | NexusGenRootTypes['SharedMedia'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CurrentOperatorResult: NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CurrentUserAdsResult: NexusGenRootTypes['BookingAds'] | NexusGenRootTypes['UnableToProcessError'];
  CurrentUserBidsResult: NexusGenRootTypes['BookingAdBids'] | NexusGenRootTypes['UnableToProcessError'];
  CurrentUserBookingsResult: NexusGenRootTypes['BookingsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  CurrentUserMediaResult: NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['SharedMedia'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'] | NexusGenRootTypes['UserMedia'];
  DeleteAccountResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteBookingAdResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteBookingMessageResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteClaimResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteDonationReceiptResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteGenderOptionResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteHostingOptionResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteInvidualOperatorCoreServicesResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteInvidualOperatorExtraServicesResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteLanguageOptionResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteMediaResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['IsActiveOperatorMainMediaError'] | NexusGenRootTypes['IsActiveOperatorWithNoReplacementMediaError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteOperatorAvailabilityResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeletePartnerResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteReviewResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  DeleteServiceOptionResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DeleteSpecieOptionResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  DonationByIdResult: NexusGenRootTypes['Donation'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'];
  DonationReceiptByIdResult: NexusGenRootTypes['DonationReceipt'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'];
  DonationReceiptsResult: NexusGenRootTypes['DonationReceiptsList'] | NexusGenRootTypes['UnableToProcessError'];
  DonationsResult: NexusGenRootTypes['DonationsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  GenderOptionByIdResult: NexusGenRootTypes['GenderOption'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'];
  GenderOptionsResult: NexusGenRootTypes['GenderOptionsList'] | NexusGenRootTypes['UnableToProcessError'];
  GetCronStatusResult: NexusGenRootTypes['CronStatus'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  HostingOptionByIdResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'];
  HostingOptionsResult: NexusGenRootTypes['HostingOptionsList'] | NexusGenRootTypes['UnableToProcessError'];
  IndividualOperatorResult: NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  LanguageOptionByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['LanguageOption'] | NexusGenRootTypes['NotFoundError'];
  LanguageOptionsResult: NexusGenRootTypes['LanguageOptionsList'] | NexusGenRootTypes['UnableToProcessError'];
  LostPasswordResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['NotFoundError'];
  MediaByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorMedia'] | NexusGenRootTypes['SharedMedia'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'] | NexusGenRootTypes['UserMedia'];
  MediasResult: NexusGenRootTypes['MediasList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  ModifyEmailResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  ModifyPasswordResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UserAuthenticationError'];
  OperatorByIdResult: NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['NotFoundError'];
  PartnerByIdResult: NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['Partner'];
  PartnersResult: NexusGenRootTypes['PartnersList'] | NexusGenRootTypes['UnableToProcessError'];
  RemoveBidForBookingAdResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  ResetPasswordResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'];
  ReviewByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorReview'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'] | NexusGenRootTypes['UserReview'];
  ReviewsResult: NexusGenRootTypes['ReviewsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  SearchAdsResult: NexusGenRootTypes['BookingAds'] | NexusGenRootTypes['UnableToProcessError'];
  SearchDonationReceiptsResult: NexusGenRootTypes['DonationReceiptsList'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'];
  SearchDonationsResult: NexusGenRootTypes['DonationsList'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'];
  SearchOperatorsResult: NexusGenRootTypes['Operators'] | NexusGenRootTypes['UnableToProcessError'];
  SearchPartnersResult: NexusGenRootTypes['PartnersList'] | NexusGenRootTypes['UnableToProcessError'];
  SendVerificationEmailResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'];
  ServiceOptionByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['ServiceOption'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  ServiceOptionsResult: NexusGenRootTypes['ServiceOptionsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  SetBookingMessagesAsReadResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  SignInResult: NexusGenRootTypes['Account'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'];
  SignOutResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['UserAuthenticationError'];
  SpecieOptionByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['SpecieOption'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  SpecieOptionsResult: NexusGenRootTypes['SpecieOptionsList'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  StaffByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['Staff'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  StartCronResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  StopCronResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdateBookingAdResult: NexusGenRootTypes['BookingAd'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  UpdateBookingMessageResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorBookingMessage'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserBookingMessage'];
  UpdateBookingPaymentStatusResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['PaymentProcessorError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  UpdateDonationReceiptResult: NexusGenRootTypes['DonationReceipt'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdateGenderOptionResult: NexusGenRootTypes['GenderOption'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdateHostingOptionResult: NexusGenRootTypes['HostingOption'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdateIndividualOperatorResult: NexusGenRootTypes['IndividualOperator'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'];
  UpdateInvidualOperatorCoreServicesResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  UpdateInvidualOperatorExtraServicesResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'];
  UpdateLanguageOptionResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['LanguageOption'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdatePartnerResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['Partner'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdateReviewResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['OperatorReview'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserReview'];
  UpdateServiceOptionResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['ServiceOption'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UpdateSpecieOptionResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['SpecieOption'] | NexusGenRootTypes['UnableToProcessError'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  UserByIdResult: NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['User'] | NexusGenRootTypes['UserAuthenticationError'] | NexusGenRootTypes['UserForbiddenError'];
  VerifyUserResult: NexusGenRootTypes['BooleanResult'] | NexusGenRootTypes['InvalidArgumentsError'] | NexusGenRootTypes['NotFoundError'] | NexusGenRootTypes['UnableToProcessError'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id: string; // String!
    operator: NexusGenRootTypes['IndividualOperator'] | null; // IndividualOperator
    staff: NexusGenRootTypes['Staff'] | null; // Staff
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    verifiedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AccountsList: { // field return type
    accounts: Array<NexusGenRootTypes['Account'] | null> | null; // [Account]
  }
  AuthorizedPayment: { // field return type
    clientSecret: string | null; // String
    hadRef: boolean | null; // Boolean
    stripeTargetApi: string | null; // String
  }
  Booking: { // field return type
    animalsIds: Array<string | null> | null; // [ID]
    applictionFeeAmount: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    canceled: boolean | null; // Boolean
    canceledBy: string | null; // String
    canceledReason: string | null; // String
    claims: Array<NexusGenRootTypes['Claim'] | null> | null; // [Claim]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    endDate: NexusGenScalars['Date'] | null; // Date
    id: string; // String!
    messages: Array<NexusGenRootTypes['BookingMessage'] | null> | null; // [BookingMessage]
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    operatorConfirmationDate: NexusGenScalars['DateTime'] | null; // DateTime
    ownerConfirmationDate: NexusGenScalars['DateTime'] | null; // DateTime
    paid: boolean | null; // Boolean
    payment: NexusGenRootTypes['BookingPayment'] | null; // BookingPayment
    priceWithOutApplicationFee: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    reviews: Array<NexusGenRootTypes['Review'] | null> | null; // [Review]
    selectedOptions: Array<NexusGenScalars['JSON'] | null> | null; // [JSON]
    service: NexusGenRootTypes['ServiceOption'] | null; // ServiceOption
    startDate: NexusGenScalars['Date'] | null; // Date
    status: NexusGenEnums['BookingStatus'] | null; // BookingStatus
    underReview: boolean | null; // Boolean
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
  }
  BookingAd: { // field return type
    animals: Array<NexusGenRootTypes['SpecieOption'] | null> | null; // [SpecieOption]
    animalsSpeciesIds: string[]; // [String!]!
    bids: Array<NexusGenRootTypes['Operator'] | null> | null; // [Operator]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    endDate: NexusGenScalars['Date'] | null; // Date
    id: string; // String!
    location: NexusGenRootTypes['Location'] | null; // Location
    service: NexusGenRootTypes['ServiceOption'] | null; // ServiceOption
    serviceMaxPrice: number | null; // Float
    serviceOptionId: string; // String!
    startDate: NexusGenScalars['Date'] | null; // Date
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
  }
  BookingAdBid: { // field return type
    bookingAd: NexusGenRootTypes['BookingAd'] | null; // BookingAd
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  BookingAdBids: { // field return type
    bids: Array<NexusGenRootTypes['BookingAdBid'] | null> | null; // [BookingAdBid]
  }
  BookingAds: { // field return type
    bookingAds: Array<NexusGenRootTypes['BookingAd'] | null> | null; // [BookingAd]
  }
  BookingMessagesList: { // field return type
    bookingMessages: Array<NexusGenRootTypes['BookingMessage'] | null> | null; // [BookingMessage]
  }
  BookingsList: { // field return type
    bookings: Array<NexusGenRootTypes['Booking'] | null> | null; // [Booking]
  }
  BooleanResult: { // field return type
    success: boolean | null; // Boolean
  }
  CannotBookHimSelfError: { // field return type
    cannotBookHimSelfError: string | null; // String
  }
  ClaimsList: { // field return type
    claims: Array<NexusGenRootTypes['Claim'] | null> | null; // [Claim]
  }
  CronStatus: { // field return type
    status: string | null; // String
  }
  Donation: { // field return type
    amountToDonate: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DonationReceipt: { // field return type
    amountDonated: NexusGenScalars['PositiveFloat'] | null; // PositiveFloat
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DonationReceiptMedia: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    donationReceipt: NexusGenRootTypes['DonationReceipt'] | null; // DonationReceipt
    donationReceiptId: string | null; // ID
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  DonationReceiptsList: { // field return type
    donationReceipts: Array<NexusGenRootTypes['DonationReceipt'] | null> | null; // [DonationReceipt]
  }
  DonationsList: { // field return type
    donations: Array<NexusGenRootTypes['Donation'] | null> | null; // [Donation]
  }
  ExistingBookingError: { // field return type
    existingBookingError: string | null; // String
  }
  GenderOption: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  GenderOptionsList: { // field return type
    genderOptions: Array<NexusGenRootTypes['GenderOption'] | null> | null; // [GenderOption]
  }
  HostingOption: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  HostingOptionsList: { // field return type
    hostingOptions: Array<NexusGenRootTypes['HostingOption'] | null> | null; // [HostingOption]
  }
  IndividualOperator: { // field return type
    acceptedSpecieOptionsIds: Array<string | null> | null; // [String]
    account: NexusGenRootTypes['Account'] | null; // Account
    accountId: string | null; // ID
    availabilities: Array<NexusGenRootTypes['OperatorAvailability'] | null> | null; // [OperatorAvailability]
    avatar: NexusGenRootTypes['Media'] | null; // Media
    bids: Array<NexusGenRootTypes['BookingAdBid'] | null> | null; // [BookingAdBid]
    birthDate: NexusGenScalars['Date'] | null; // Date
    calendarUpdate: NexusGenScalars['DateTime'] | null; // DateTime
    coreServices: Array<NexusGenRootTypes['IndividualOperatorCoreService'] | null> | null; // [IndividualOperatorCoreService]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    donations: Array<NexusGenRootTypes['Donation'] | null> | null; // [Donation]
    extraServices: NexusGenRootTypes['Account'] | null; // Account
    gender: NexusGenRootTypes['GenderOption'] | null; // GenderOption
    hosting: NexusGenRootTypes['HostingOption'] | null; // HostingOption
    hostingOptionId: string | null; // String
    id: string; // String!
    languageOptionIds: Array<string | null> | null; // [String]
    location: NexusGenRootTypes['Location'] | null; // Location
    mainMediaId: string | null; // String
    medias: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    ownAnimalsSpecieOptionsIds: Array<string | null> | null; // [String]
    partner: NexusGenRootTypes['Partner'] | null; // Partner
    partnerId: string | null; // String
    partnerPercentage: number | null; // Int
    stripeAccountId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  IndividualOperatorCoreService: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operator: NexusGenRootTypes['IndividualOperator'] | null; // IndividualOperator
    price: number; // Int!
    service: NexusGenRootTypes['ServiceOption'] | null; // ServiceOption
    serviceOptionId: string; // ID!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  IndividualOperatorExtraService: { // field return type
    abilityToProvideMedicalCare: boolean | null; // Boolean
    acceptShortNotice: boolean | null; // Boolean
    atHomeComeGetPet: boolean | null; // Boolean
    atHomeComeGetPetExtraPrice: number | null; // Int
    atHomeContinuously: boolean | null; // Boolean
    atHomeContinuouslyExtraPrice: number | null; // Int
    atHomeExclusivity: boolean | null; // Boolean
    atHomeExlusivityExtraPrice: number | null; // Int
    atHomeOnlyBringPet: boolean | null; // Boolean
    atHomeOnlyBringPetExtraPrice: number | null; // Int
    atOwnerHomeCurtains: boolean | null; // Boolean
    atOwnerHomeCurtainsExtraPrice: number | null; // Int
    atOwnerHomeMail: boolean | null; // Boolean
    atOwnerHomeMailExtraPrice: number | null; // Int
    atOwnerHomePlantsCare: boolean | null; // Boolean
    atOwnerHomePlantsCareExtraPrice: number | null; // Int
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    flexibleCancelation: boolean | null; // Boolean
    id: string; // String!
    isProfessionalOperator: boolean | null; // Boolean
    operator: NexusGenRootTypes['IndividualOperator'] | null; // IndividualOperator
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  InvalidArgument: { // field return type
    key: string; // String!
    message: string; // String!
  }
  InvalidArgumentsError: { // field return type
    code: NexusGenEnums['ErrorCode']; // ErrorCode!
    invalidArguments: Array<NexusGenRootTypes['InvalidArgument'] | null>; // [InvalidArgument]!
    message: NexusGenEnums['ErrorMessage']; // ErrorMessage!
  }
  InvalidOperatorError: { // field return type
    invalidOperatorError: string | null; // String
  }
  IsActiveOperatorMainMediaError: { // field return type
    activeOperatorMainMediaError: string; // String!
  }
  IsActiveOperatorWithNoReplacementMediaError: { // field return type
    activeOperatorWithNoReplacementMediaError: string; // String!
  }
  LanguageOption: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    media: NexusGenRootTypes['Media'] | null; // Media
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  LanguageOptionMedia: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    language: NexusGenRootTypes['LanguageOption'] | null; // LanguageOption
    languageOptionId: string | null; // ID
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  LanguageOptionsList: { // field return type
    languageOptions: Array<NexusGenRootTypes['LanguageOption'] | null> | null; // [LanguageOption]
  }
  Location: { // field return type
    address: string | null; // String
    bookingAd: NexusGenRootTypes['BookingAd'] | null; // BookingAd
    country: string | null; // String
    country_code: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    latitude: NexusGenScalars['Latitude']; // Latitude!
    longitude: NexusGenScalars['Longitude']; // Longitude!
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    postcode: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  MediasList: { // field return type
    medias: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
  }
  MessageMedia: { // field return type
    bookingMessageId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    message: NexusGenRootTypes['BookingMessage'] | null; // BookingMessage
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: { // field return type
    authorizePayment: NexusGenRootTypes['AuthorizePaymentResult'] | null; // AuthorizePaymentResult
    bidForBookingAd: NexusGenRootTypes['BidForBookingAdResult'] | null; // BidForBookingAdResult
    cancelBooking: NexusGenRootTypes['CancelBookingResult'] | null; // CancelBookingResult
    cancelOnGoingBooking: NexusGenRootTypes['CancelOnGoingBookingResult'] | null; // CancelOnGoingBookingResult
    confirmBooking: NexusGenRootTypes['ConfirmBookingResult'] | null; // ConfirmBookingResult
    createAccount: NexusGenRootTypes['CreateAccountResult'] | null; // CreateAccountResult
    createAd: NexusGenRootTypes['CreateBookingAdResult'] | null; // CreateBookingAdResult
    createBooking: NexusGenRootTypes['CreateBookingResult'] | null; // CreateBookingResult
    createBookingClaim: NexusGenRootTypes['CreateBookingClaimResult'] | null; // CreateBookingClaimResult
    createBookingMessage: NexusGenRootTypes['CreateBookingMessageResult'] | null; // CreateBookingMessageResult
    createDonationReceipt: NexusGenRootTypes['CreateDonationReceiptResult'] | null; // CreateDonationReceiptResult
    createGenderOption: NexusGenRootTypes['CreateGenderOptionResult'] | null; // CreateGenderOptionResult
    createHostingOption: NexusGenRootTypes['CreateHostingOptionResult'] | null; // CreateHostingOptionResult
    createIndividualOperator: NexusGenRootTypes['CreateIndividualOperatorResult'] | null; // CreateIndividualOperatorResult
    createInvidualOperatorCoreServices: NexusGenRootTypes['CreateInvidualOperatorCoreServicesResult'] | null; // CreateInvidualOperatorCoreServicesResult
    createInvidualOperatorExtraServices: NexusGenRootTypes['CreateInvidualOperatorExtraServicesResult'] | null; // CreateInvidualOperatorExtraServicesResult
    createLanguageOption: NexusGenRootTypes['CreateLanguageOptionResult'] | null; // CreateLanguageOptionResult
    createMedia: NexusGenRootTypes['CreateMediaResult'] | null; // CreateMediaResult
    createOperatorAvailability: NexusGenRootTypes['CreateOperatorAvailabilityResult'] | null; // CreateOperatorAvailabilityResult
    createPartner: NexusGenRootTypes['CreatePartnerResult'] | null; // CreatePartnerResult
    createReview: NexusGenRootTypes['CreateReviewResult'] | null; // CreateReviewResult
    createServiceOption: NexusGenRootTypes['CreateServiceOptionResult'] | null; // CreateServiceOptionResult
    createSpecieOption: NexusGenRootTypes['CreateSpecieOptionResult'] | null; // CreateSpecieOptionResult
    createStaffAccount: NexusGenRootTypes['CreateStaffAccountResult'] | null; // CreateStaffAccountResult
    deleteAccount: NexusGenRootTypes['DeleteAccountResult'] | null; // DeleteAccountResult
    deleteBookingAd: NexusGenRootTypes['DeleteBookingAdResult'] | null; // DeleteBookingAdResult
    deleteBookingMessage: NexusGenRootTypes['DeleteBookingMessageResult'] | null; // DeleteBookingMessageResult
    deleteClaim: NexusGenRootTypes['DeleteClaimResult'] | null; // DeleteClaimResult
    deleteCoreIndividualOperatorService: NexusGenRootTypes['DeleteInvidualOperatorCoreServicesResult'] | null; // DeleteInvidualOperatorCoreServicesResult
    deleteDonationReceipt: NexusGenRootTypes['DeleteDonationReceiptResult'] | null; // DeleteDonationReceiptResult
    deleteExtraIndividualOperatorService: NexusGenRootTypes['DeleteInvidualOperatorExtraServicesResult'] | null; // DeleteInvidualOperatorExtraServicesResult
    deleteGenderOption: NexusGenRootTypes['DeleteGenderOptionResult'] | null; // DeleteGenderOptionResult
    deleteHostingOption: NexusGenRootTypes['DeleteHostingOptionResult'] | null; // DeleteHostingOptionResult
    deleteLanguageOption: NexusGenRootTypes['DeleteLanguageOptionResult'] | null; // DeleteLanguageOptionResult
    deleteMedia: NexusGenRootTypes['DeleteMediaResult'] | null; // DeleteMediaResult
    deleteOperatorAvailability: NexusGenRootTypes['DeleteOperatorAvailabilityResult'] | null; // DeleteOperatorAvailabilityResult
    deletePartner: NexusGenRootTypes['DeletePartnerResult'] | null; // DeletePartnerResult
    deleteReview: NexusGenRootTypes['DeleteReviewResult'] | null; // DeleteReviewResult
    deleteServiceOption: NexusGenRootTypes['DeleteServiceOptionResult'] | null; // DeleteServiceOptionResult
    deleteSpecieOption: NexusGenRootTypes['DeleteSpecieOptionResult'] | null; // DeleteSpecieOptionResult
    lostPassword: NexusGenRootTypes['LostPasswordResult'] | null; // LostPasswordResult
    modifyEmail: NexusGenRootTypes['ModifyEmailResult'] | null; // ModifyEmailResult
    modifyPassword: NexusGenRootTypes['ModifyPasswordResult'] | null; // ModifyPasswordResult
    removeBidForBookingAd: NexusGenRootTypes['RemoveBidForBookingAdResult'] | null; // RemoveBidForBookingAdResult
    resetPassword: NexusGenRootTypes['ResetPasswordResult'] | null; // ResetPasswordResult
    sendVerificationEmail: NexusGenRootTypes['SendVerificationEmailResult'] | null; // SendVerificationEmailResult
    setAsRead: NexusGenRootTypes['SetBookingMessagesAsReadResult'] | null; // SetBookingMessagesAsReadResult
    signIn: NexusGenRootTypes['SignInResult'] | null; // SignInResult
    signOut: NexusGenRootTypes['SignOutResult'] | null; // SignOutResult
    startCron: NexusGenRootTypes['StartCronResult'] | null; // StartCronResult
    stopCron: NexusGenRootTypes['StopCronResult'] | null; // StopCronResult
    updateBookingAd: NexusGenRootTypes['UpdateBookingAdResult'] | null; // UpdateBookingAdResult
    updateBookingMessage: NexusGenRootTypes['UpdateBookingMessageResult'] | null; // UpdateBookingMessageResult
    updateBookingPaymentStatus: NexusGenRootTypes['UpdateBookingPaymentStatusResult'] | null; // UpdateBookingPaymentStatusResult
    updateDonationReceipt: NexusGenRootTypes['UpdateDonationReceiptResult'] | null; // UpdateDonationReceiptResult
    updateGenderOption: NexusGenRootTypes['UpdateGenderOptionResult'] | null; // UpdateGenderOptionResult
    updateHostingOption: NexusGenRootTypes['UpdateHostingOptionResult'] | null; // UpdateHostingOptionResult
    updateIndividualOperator: NexusGenRootTypes['IndividualOperatorResult'] | null; // IndividualOperatorResult
    updateInvidualOperatorCoreServices: NexusGenRootTypes['UpdateInvidualOperatorCoreServicesResult'] | null; // UpdateInvidualOperatorCoreServicesResult
    updateInvidualOperatorExtraServices: NexusGenRootTypes['UpdateInvidualOperatorExtraServicesResult'] | null; // UpdateInvidualOperatorExtraServicesResult
    updateLanguageOption: NexusGenRootTypes['UpdateLanguageOptionResult'] | null; // UpdateLanguageOptionResult
    updatePartner: NexusGenRootTypes['UpdatePartnerResult'] | null; // UpdatePartnerResult
    updateReview: NexusGenRootTypes['UpdateReviewResult'] | null; // UpdateReviewResult
    updateServiceOption: NexusGenRootTypes['UpdateServiceOptionResult'] | null; // UpdateServiceOptionResult
    updateSpecieOption: NexusGenRootTypes['UpdateSpecieOptionResult'] | null; // UpdateSpecieOptionResult
    verifyUser: NexusGenRootTypes['VerifyUserResult'] | null; // VerifyUserResult
  }
  NotFoundError: { // field return type
    code: NexusGenEnums['ErrorCode']; // ErrorCode!
    message: NexusGenEnums['ErrorMessage']; // ErrorMessage!
  }
  NotSupportedExtraServiceError: { // field return type
    notSupportedExtraServiceError: string | null; // String
  }
  OperatorAvailability: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    date: NexusGenScalars['Date'] | null; // Date
    id: string; // String!
    operator: NexusGenRootTypes['IndividualOperator'] | null; // IndividualOperator
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorBookingMessage: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    medias: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    operatorId: string | null; // ID
    readAt: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorCannotProcessPaymentsError: { // field return type
    operatorCannotProcessPaymentsError: string | null; // String
  }
  OperatorClaim: { // field return type
    bookingId: string; // ID!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    operatorId: string | null; // ID
    reason: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorMedia: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    operatorId: string | null; // ID
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  OperatorReview: { // field return type
    body: string | null; // String
    booking: NexusGenRootTypes['Booking'] | null; // Booking
    bookingId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    operatorId: string | null; // ID
    score: number; // Float!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Operators: { // field return type
    operators: Array<NexusGenRootTypes['IndividualOperator'] | null> | null; // [IndividualOperator]
  }
  Partner: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    creator: NexusGenRootTypes['Staff'] | null; // Staff
    description: string; // String!
    donations: Array<NexusGenRootTypes['Donation'] | null> | null; // [Donation]
    id: string; // String!
    medias: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    name: string; // String!
    receipts: Array<NexusGenRootTypes['DonationReceipt'] | null> | null; // [DonationReceipt]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    websiteUrl: string; // String!
  }
  PartnerMedia: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    partner: NexusGenRootTypes['Partner'] | null; // Partner
    partnerId: string | null; // ID
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PartnersList: { // field return type
    partners: Array<NexusGenRootTypes['Partner'] | null> | null; // [Partner]
  }
  PaymentProcessorError: { // field return type
    paymentProcessorError: string | null; // String
  }
  PreExistingOperatorBidError: { // field return type
    preExistingOperatorBidError: string | null; // String
  }
  PreExistingUserAdError: { // field return type
    preExistingUserAdError: string | null; // String
  }
  Query: { // field return type
    Partners: NexusGenRootTypes['PartnersResult'] | null; // PartnersResult
    accountById: NexusGenRootTypes['AccountByIdResult'] | null; // AccountByIdResult
    adById: NexusGenRootTypes['AdByIdResult'] | null; // AdByIdResult
    allAccounts: NexusGenRootTypes['AllAccountsResult'] | null; // AllAccountsResult
    allOperators: NexusGenRootTypes['AllOperatorsResult'] | null; // AllOperatorsResult
    allStaffs: NexusGenRootTypes['AllStaffsResult'] | null; // AllStaffsResult
    allUsers: NexusGenRootTypes['AllUsersResult'] | null; // AllUsersResult
    bookingById: NexusGenRootTypes['BookingByIdResult'] | null; // BookingByIdResult
    bookingMessageById: NexusGenRootTypes['BookingMessageByIdResult'] | null; // BookingMessageByIdResult
    bookingMessages: NexusGenRootTypes['BookingMessagesResult'] | null; // BookingMessagesResult
    bookings: NexusGenRootTypes['BookingsResult'] | null; // BookingsResult
    bookingsWithPaymentStatus: NexusGenRootTypes['BookingWithPaymentStatusResult'] | null; // BookingWithPaymentStatusResult
    claimById: NexusGenRootTypes['ClaimByIdResult'] | null; // ClaimByIdResult
    claims: NexusGenRootTypes['ClaimsResult'] | null; // ClaimsResult
    currentAccount: NexusGenRootTypes['CurrentAccountResult'] | null; // CurrentAccountResult
    currentOperator: NexusGenRootTypes['CurrentOperatorResult'] | null; // CurrentOperatorResult
    currentOperatorBids: NexusGenRootTypes['CurrentUserBidsResult'] | null; // CurrentUserBidsResult
    currentOperatorDonations: NexusGenRootTypes['CurrentOperatorDonationsResult'] | null; // CurrentOperatorDonationsResult
    currentOperatorMedia: NexusGenRootTypes['CurrentOperatorMediaResult'] | null; // CurrentOperatorMediaResult
    currentUserAds: NexusGenRootTypes['CurrentUserAdsResult'] | null; // CurrentUserAdsResult
    currentUserMedia: NexusGenRootTypes['CurrentUserMediaResult'] | null; // CurrentUserMediaResult
    currentUserOperatorBookings: NexusGenRootTypes['CurrentUserBookingsResult'] | null; // CurrentUserBookingsResult
    currentUserOwnerBookings: NexusGenRootTypes['CurrentUserBookingsResult'] | null; // CurrentUserBookingsResult
    donationById: NexusGenRootTypes['DonationByIdResult'] | null; // DonationByIdResult
    donationReceipts: NexusGenRootTypes['DonationReceiptsResult'] | null; // DonationReceiptsResult
    donations: NexusGenRootTypes['DonationsResult'] | null; // DonationsResult
    genderOptionById: NexusGenRootTypes['GenderOptionByIdResult'] | null; // GenderOptionByIdResult
    gendersOptions: NexusGenRootTypes['GenderOptionsResult'] | null; // GenderOptionsResult
    getCronStatus: NexusGenRootTypes['GetCronStatusResult'] | null; // GetCronStatusResult
    hostingOptionById: NexusGenRootTypes['HostingOptionByIdResult'] | null; // HostingOptionByIdResult
    hostingsOptions: NexusGenRootTypes['HostingOptionsResult'] | null; // HostingOptionsResult
    languageOptionById: NexusGenRootTypes['LanguageOptionByIdResult'] | null; // LanguageOptionByIdResult
    languagesOptions: NexusGenRootTypes['LanguageOptionsResult'] | null; // LanguageOptionsResult
    mediaById: NexusGenRootTypes['MediaByIdResult'] | null; // MediaByIdResult
    medias: NexusGenRootTypes['MediasResult'] | null; // MediasResult
    operatorById: NexusGenRootTypes['OperatorByIdResult'] | null; // OperatorByIdResult
    partnerById: NexusGenRootTypes['PartnerByIdResult'] | null; // PartnerByIdResult
    receiptById: NexusGenRootTypes['DonationReceiptByIdResult'] | null; // DonationReceiptByIdResult
    reviewById: NexusGenRootTypes['ReviewByIdResult'] | null; // ReviewByIdResult
    reviews: NexusGenRootTypes['ReviewsResult'] | null; // ReviewsResult
    searchAds: NexusGenRootTypes['SearchAdsResult'] | null; // SearchAdsResult
    searchDonationReceipts: NexusGenRootTypes['SearchDonationReceiptsResult'] | null; // SearchDonationReceiptsResult
    searchDonations: NexusGenRootTypes['SearchDonationsResult'] | null; // SearchDonationsResult
    searchOperators: NexusGenRootTypes['SearchOperatorsResult'] | null; // SearchOperatorsResult
    searchPartners: NexusGenRootTypes['SearchPartnersResult'] | null; // SearchPartnersResult
    serviceOptionById: NexusGenRootTypes['ServiceOptionByIdResult'] | null; // ServiceOptionByIdResult
    servicesOptions: NexusGenRootTypes['ServiceOptionsResult'] | null; // ServiceOptionsResult
    specieOptionById: NexusGenRootTypes['SpecieOptionByIdResult'] | null; // SpecieOptionByIdResult
    speciesOptions: NexusGenRootTypes['SpecieOptionsResult'] | null; // SpecieOptionsResult
    staffById: NexusGenRootTypes['StaffByIdResult'] | null; // StaffByIdResult
    userById: NexusGenRootTypes['UserByIdResult'] | null; // UserByIdResult
  }
  ReviewsList: { // field return type
    reviews: Array<NexusGenRootTypes['Review'] | null> | null; // [Review]
  }
  ServiceOption: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  ServiceOptionsList: { // field return type
    serviceOptions: Array<NexusGenRootTypes['ServiceOption'] | null> | null; // [ServiceOption]
  }
  SharedMedia: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    operator: NexusGenRootTypes['Operator'] | null; // Operator
    operatorId: string | null; // ID
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  SpecieOption: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    nameEn: string; // String!
    nameFr: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  SpecieOptionsList: { // field return type
    specieOptions: Array<NexusGenRootTypes['SpecieOption'] | null> | null; // [SpecieOption]
  }
  Staff: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    id: string; // String!
    phoneNumber: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  StaffsList: { // field return type
    staffs: Array<NexusGenRootTypes['Staff'] | null> | null; // [Staff]
  }
  StorageInfos: { // field return type
    mediaId: string; // ID!
    signedRequest: string | null; // String
    url: string | null; // String
  }
  StripePayment: { // field return type
    booking: NexusGenRootTypes['Booking'] | null; // Booking
    bookingId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    errorCode: string | null; // String
    id: string; // String!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Subscription: { // field return type
    bookingByIdChatSub: NexusGenRootTypes['BookingMessageSubscriptionResult'] | null; // BookingMessageSubscriptionResult
    errorsEmailCronSub: NexusGenRootTypes['CronSubscriptionsResult'] | null; // CronSubscriptionsResult
    newlyCreatedBookingsAsSitterSub: NexusGenRootTypes['BookingSubscriptionResult'] | null; // BookingSubscriptionResult
    pendingPaymentCronSub: NexusGenRootTypes['CronSubscriptionsResult'] | null; // CronSubscriptionsResult
    setupIntentCronSub: NexusGenRootTypes['CronSubscriptionsResult'] | null; // CronSubscriptionsResult
    userBookingsMessagesChangesSub: NexusGenRootTypes['BookingMessageSubscriptionResult'] | null; // BookingMessageSubscriptionResult
    userBookingsStatusChangesSub: NexusGenRootTypes['BookingSubscriptionResult'] | null; // BookingSubscriptionResult
  }
  UnableToProcessError: { // field return type
    code: NexusGenEnums['ErrorCode']; // ErrorCode!
    message: NexusGenEnums['ErrorMessage']; // ErrorMessage!
  }
  User: { // field return type
    accountId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    firstName: string; // String!
    id: string; // String!
    lastName: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  UserAuthenticationError: { // field return type
    code: NexusGenEnums['ErrorCode']; // ErrorCode!
    message: NexusGenEnums['ErrorMessage']; // ErrorMessage!
  }
  UserBookingMessage: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    medias: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    readAt: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  UserClaim: { // field return type
    bookingId: string; // ID!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    reason: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  UserForbiddenError: { // field return type
    code: NexusGenEnums['ErrorCode']; // ErrorCode!
    message: NexusGenEnums['ErrorMessage']; // ErrorMessage!
  }
  UserMedia: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  UserReview: { // field return type
    body: string | null; // String
    booking: NexusGenRootTypes['Booking'] | null; // Booking
    bookingId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    score: number; // Float!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // ID
  }
  UsersList: { // field return type
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Actor: { // field return type
    accountId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  BookingMessage: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    medias: Array<NexusGenRootTypes['Media'] | null> | null; // [Media]
    readAt: NexusGenScalars['DateTime'] | null; // DateTime
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Claim: { // field return type
    bookingId: string; // ID!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    reason: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Media: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    mediaType: NexusGenEnums['MediaType'] | null; // MediaType
    storeUrl: NexusGenScalars['URL']; // URL!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Node: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Operator: { // field return type
    acceptedSpecieOptionsIds: Array<string | null> | null; // [String]
    accountId: string | null; // ID
    calendarUpdate: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    hostingOptionId: string | null; // String
    id: string; // String!
    languageOptionIds: Array<string | null> | null; // [String]
    mainMediaId: string | null; // String
    ownAnimalsSpecieOptionsIds: Array<string | null> | null; // [String]
    partnerId: string | null; // String
    partnerPercentage: number | null; // Int
    stripeAccountId: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Payment: { // field return type
    bookingId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Review: { // field return type
    body: string | null; // String
    booking: NexusGenRootTypes['Booking'] | null; // Booking
    bookingId: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    score: number; // Float!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    createdAt: 'DateTime'
    email: 'EmailAddress'
    id: 'String'
    operator: 'IndividualOperator'
    staff: 'Staff'
    updatedAt: 'DateTime'
    user: 'User'
    verifiedAt: 'DateTime'
  }
  AccountsList: { // field return type name
    accounts: 'Account'
  }
  AuthorizedPayment: { // field return type name
    clientSecret: 'String'
    hadRef: 'Boolean'
    stripeTargetApi: 'String'
  }
  Booking: { // field return type name
    animalsIds: 'ID'
    applictionFeeAmount: 'PositiveFloat'
    canceled: 'Boolean'
    canceledBy: 'String'
    canceledReason: 'String'
    claims: 'Claim'
    createdAt: 'DateTime'
    endDate: 'Date'
    id: 'String'
    messages: 'BookingMessage'
    operator: 'Operator'
    operatorConfirmationDate: 'DateTime'
    ownerConfirmationDate: 'DateTime'
    paid: 'Boolean'
    payment: 'BookingPayment'
    priceWithOutApplicationFee: 'PositiveFloat'
    reviews: 'Review'
    selectedOptions: 'JSON'
    service: 'ServiceOption'
    startDate: 'Date'
    status: 'BookingStatus'
    underReview: 'Boolean'
    updatedAt: 'DateTime'
    user: 'User'
  }
  BookingAd: { // field return type name
    animals: 'SpecieOption'
    animalsSpeciesIds: 'String'
    bids: 'Operator'
    createdAt: 'DateTime'
    description: 'String'
    endDate: 'Date'
    id: 'String'
    location: 'Location'
    service: 'ServiceOption'
    serviceMaxPrice: 'Float'
    serviceOptionId: 'String'
    startDate: 'Date'
    updatedAt: 'DateTime'
    user: 'User'
  }
  BookingAdBid: { // field return type name
    bookingAd: 'BookingAd'
    createdAt: 'DateTime'
    id: 'String'
    operator: 'Operator'
    updatedAt: 'DateTime'
  }
  BookingAdBids: { // field return type name
    bids: 'BookingAdBid'
  }
  BookingAds: { // field return type name
    bookingAds: 'BookingAd'
  }
  BookingMessagesList: { // field return type name
    bookingMessages: 'BookingMessage'
  }
  BookingsList: { // field return type name
    bookings: 'Booking'
  }
  BooleanResult: { // field return type name
    success: 'Boolean'
  }
  CannotBookHimSelfError: { // field return type name
    cannotBookHimSelfError: 'String'
  }
  ClaimsList: { // field return type name
    claims: 'Claim'
  }
  CronStatus: { // field return type name
    status: 'String'
  }
  Donation: { // field return type name
    amountToDonate: 'PositiveFloat'
    createdAt: 'DateTime'
    id: 'String'
    updatedAt: 'DateTime'
  }
  DonationReceipt: { // field return type name
    amountDonated: 'PositiveFloat'
    createdAt: 'DateTime'
    id: 'String'
    updatedAt: 'DateTime'
  }
  DonationReceiptMedia: { // field return type name
    createdAt: 'DateTime'
    donationReceipt: 'DonationReceipt'
    donationReceiptId: 'ID'
    id: 'String'
    mediaType: 'MediaType'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
  }
  DonationReceiptsList: { // field return type name
    donationReceipts: 'DonationReceipt'
  }
  DonationsList: { // field return type name
    donations: 'Donation'
  }
  ExistingBookingError: { // field return type name
    existingBookingError: 'String'
  }
  GenderOption: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    nameEn: 'String'
    nameFr: 'String'
    updatedAt: 'DateTime'
  }
  GenderOptionsList: { // field return type name
    genderOptions: 'GenderOption'
  }
  HostingOption: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    nameEn: 'String'
    nameFr: 'String'
    updatedAt: 'DateTime'
  }
  HostingOptionsList: { // field return type name
    hostingOptions: 'HostingOption'
  }
  IndividualOperator: { // field return type name
    acceptedSpecieOptionsIds: 'String'
    account: 'Account'
    accountId: 'ID'
    availabilities: 'OperatorAvailability'
    avatar: 'Media'
    bids: 'BookingAdBid'
    birthDate: 'Date'
    calendarUpdate: 'DateTime'
    coreServices: 'IndividualOperatorCoreService'
    createdAt: 'DateTime'
    description: 'String'
    donations: 'Donation'
    extraServices: 'Account'
    gender: 'GenderOption'
    hosting: 'HostingOption'
    hostingOptionId: 'String'
    id: 'String'
    languageOptionIds: 'String'
    location: 'Location'
    mainMediaId: 'String'
    medias: 'Media'
    ownAnimalsSpecieOptionsIds: 'String'
    partner: 'Partner'
    partnerId: 'String'
    partnerPercentage: 'Int'
    stripeAccountId: 'String'
    updatedAt: 'DateTime'
  }
  IndividualOperatorCoreService: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    operator: 'IndividualOperator'
    price: 'Int'
    service: 'ServiceOption'
    serviceOptionId: 'ID'
    updatedAt: 'DateTime'
  }
  IndividualOperatorExtraService: { // field return type name
    abilityToProvideMedicalCare: 'Boolean'
    acceptShortNotice: 'Boolean'
    atHomeComeGetPet: 'Boolean'
    atHomeComeGetPetExtraPrice: 'Int'
    atHomeContinuously: 'Boolean'
    atHomeContinuouslyExtraPrice: 'Int'
    atHomeExclusivity: 'Boolean'
    atHomeExlusivityExtraPrice: 'Int'
    atHomeOnlyBringPet: 'Boolean'
    atHomeOnlyBringPetExtraPrice: 'Int'
    atOwnerHomeCurtains: 'Boolean'
    atOwnerHomeCurtainsExtraPrice: 'Int'
    atOwnerHomeMail: 'Boolean'
    atOwnerHomeMailExtraPrice: 'Int'
    atOwnerHomePlantsCare: 'Boolean'
    atOwnerHomePlantsCareExtraPrice: 'Int'
    createdAt: 'DateTime'
    flexibleCancelation: 'Boolean'
    id: 'String'
    isProfessionalOperator: 'Boolean'
    operator: 'IndividualOperator'
    updatedAt: 'DateTime'
  }
  InvalidArgument: { // field return type name
    key: 'String'
    message: 'String'
  }
  InvalidArgumentsError: { // field return type name
    code: 'ErrorCode'
    invalidArguments: 'InvalidArgument'
    message: 'ErrorMessage'
  }
  InvalidOperatorError: { // field return type name
    invalidOperatorError: 'String'
  }
  IsActiveOperatorMainMediaError: { // field return type name
    activeOperatorMainMediaError: 'String'
  }
  IsActiveOperatorWithNoReplacementMediaError: { // field return type name
    activeOperatorWithNoReplacementMediaError: 'String'
  }
  LanguageOption: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    media: 'Media'
    nameEn: 'String'
    nameFr: 'String'
    updatedAt: 'DateTime'
  }
  LanguageOptionMedia: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    language: 'LanguageOption'
    languageOptionId: 'ID'
    mediaType: 'MediaType'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
  }
  LanguageOptionsList: { // field return type name
    languageOptions: 'LanguageOption'
  }
  Location: { // field return type name
    address: 'String'
    bookingAd: 'BookingAd'
    country: 'String'
    country_code: 'String'
    createdAt: 'DateTime'
    id: 'String'
    latitude: 'Latitude'
    longitude: 'Longitude'
    operator: 'Operator'
    postcode: 'String'
    updatedAt: 'DateTime'
  }
  MediasList: { // field return type name
    medias: 'Media'
  }
  MessageMedia: { // field return type name
    bookingMessageId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    mediaType: 'MediaType'
    message: 'BookingMessage'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    authorizePayment: 'AuthorizePaymentResult'
    bidForBookingAd: 'BidForBookingAdResult'
    cancelBooking: 'CancelBookingResult'
    cancelOnGoingBooking: 'CancelOnGoingBookingResult'
    confirmBooking: 'ConfirmBookingResult'
    createAccount: 'CreateAccountResult'
    createAd: 'CreateBookingAdResult'
    createBooking: 'CreateBookingResult'
    createBookingClaim: 'CreateBookingClaimResult'
    createBookingMessage: 'CreateBookingMessageResult'
    createDonationReceipt: 'CreateDonationReceiptResult'
    createGenderOption: 'CreateGenderOptionResult'
    createHostingOption: 'CreateHostingOptionResult'
    createIndividualOperator: 'CreateIndividualOperatorResult'
    createInvidualOperatorCoreServices: 'CreateInvidualOperatorCoreServicesResult'
    createInvidualOperatorExtraServices: 'CreateInvidualOperatorExtraServicesResult'
    createLanguageOption: 'CreateLanguageOptionResult'
    createMedia: 'CreateMediaResult'
    createOperatorAvailability: 'CreateOperatorAvailabilityResult'
    createPartner: 'CreatePartnerResult'
    createReview: 'CreateReviewResult'
    createServiceOption: 'CreateServiceOptionResult'
    createSpecieOption: 'CreateSpecieOptionResult'
    createStaffAccount: 'CreateStaffAccountResult'
    deleteAccount: 'DeleteAccountResult'
    deleteBookingAd: 'DeleteBookingAdResult'
    deleteBookingMessage: 'DeleteBookingMessageResult'
    deleteClaim: 'DeleteClaimResult'
    deleteCoreIndividualOperatorService: 'DeleteInvidualOperatorCoreServicesResult'
    deleteDonationReceipt: 'DeleteDonationReceiptResult'
    deleteExtraIndividualOperatorService: 'DeleteInvidualOperatorExtraServicesResult'
    deleteGenderOption: 'DeleteGenderOptionResult'
    deleteHostingOption: 'DeleteHostingOptionResult'
    deleteLanguageOption: 'DeleteLanguageOptionResult'
    deleteMedia: 'DeleteMediaResult'
    deleteOperatorAvailability: 'DeleteOperatorAvailabilityResult'
    deletePartner: 'DeletePartnerResult'
    deleteReview: 'DeleteReviewResult'
    deleteServiceOption: 'DeleteServiceOptionResult'
    deleteSpecieOption: 'DeleteSpecieOptionResult'
    lostPassword: 'LostPasswordResult'
    modifyEmail: 'ModifyEmailResult'
    modifyPassword: 'ModifyPasswordResult'
    removeBidForBookingAd: 'RemoveBidForBookingAdResult'
    resetPassword: 'ResetPasswordResult'
    sendVerificationEmail: 'SendVerificationEmailResult'
    setAsRead: 'SetBookingMessagesAsReadResult'
    signIn: 'SignInResult'
    signOut: 'SignOutResult'
    startCron: 'StartCronResult'
    stopCron: 'StopCronResult'
    updateBookingAd: 'UpdateBookingAdResult'
    updateBookingMessage: 'UpdateBookingMessageResult'
    updateBookingPaymentStatus: 'UpdateBookingPaymentStatusResult'
    updateDonationReceipt: 'UpdateDonationReceiptResult'
    updateGenderOption: 'UpdateGenderOptionResult'
    updateHostingOption: 'UpdateHostingOptionResult'
    updateIndividualOperator: 'IndividualOperatorResult'
    updateInvidualOperatorCoreServices: 'UpdateInvidualOperatorCoreServicesResult'
    updateInvidualOperatorExtraServices: 'UpdateInvidualOperatorExtraServicesResult'
    updateLanguageOption: 'UpdateLanguageOptionResult'
    updatePartner: 'UpdatePartnerResult'
    updateReview: 'UpdateReviewResult'
    updateServiceOption: 'UpdateServiceOptionResult'
    updateSpecieOption: 'UpdateSpecieOptionResult'
    verifyUser: 'VerifyUserResult'
  }
  NotFoundError: { // field return type name
    code: 'ErrorCode'
    message: 'ErrorMessage'
  }
  NotSupportedExtraServiceError: { // field return type name
    notSupportedExtraServiceError: 'String'
  }
  OperatorAvailability: { // field return type name
    createdAt: 'DateTime'
    date: 'Date'
    id: 'String'
    operator: 'IndividualOperator'
    updatedAt: 'DateTime'
  }
  OperatorBookingMessage: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    medias: 'Media'
    operator: 'Operator'
    operatorId: 'ID'
    readAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  OperatorCannotProcessPaymentsError: { // field return type name
    operatorCannotProcessPaymentsError: 'String'
  }
  OperatorClaim: { // field return type name
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    operator: 'Operator'
    operatorId: 'ID'
    reason: 'String'
    updatedAt: 'DateTime'
  }
  OperatorMedia: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    mediaType: 'MediaType'
    operator: 'Operator'
    operatorId: 'ID'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
  }
  OperatorReview: { // field return type name
    body: 'String'
    booking: 'Booking'
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    operator: 'Operator'
    operatorId: 'ID'
    score: 'Float'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Operators: { // field return type name
    operators: 'IndividualOperator'
  }
  Partner: { // field return type name
    createdAt: 'DateTime'
    creator: 'Staff'
    description: 'String'
    donations: 'Donation'
    id: 'String'
    medias: 'Media'
    name: 'String'
    receipts: 'DonationReceipt'
    updatedAt: 'DateTime'
    websiteUrl: 'String'
  }
  PartnerMedia: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    mediaType: 'MediaType'
    partner: 'Partner'
    partnerId: 'ID'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
  }
  PartnersList: { // field return type name
    partners: 'Partner'
  }
  PaymentProcessorError: { // field return type name
    paymentProcessorError: 'String'
  }
  PreExistingOperatorBidError: { // field return type name
    preExistingOperatorBidError: 'String'
  }
  PreExistingUserAdError: { // field return type name
    preExistingUserAdError: 'String'
  }
  Query: { // field return type name
    Partners: 'PartnersResult'
    accountById: 'AccountByIdResult'
    adById: 'AdByIdResult'
    allAccounts: 'AllAccountsResult'
    allOperators: 'AllOperatorsResult'
    allStaffs: 'AllStaffsResult'
    allUsers: 'AllUsersResult'
    bookingById: 'BookingByIdResult'
    bookingMessageById: 'BookingMessageByIdResult'
    bookingMessages: 'BookingMessagesResult'
    bookings: 'BookingsResult'
    bookingsWithPaymentStatus: 'BookingWithPaymentStatusResult'
    claimById: 'ClaimByIdResult'
    claims: 'ClaimsResult'
    currentAccount: 'CurrentAccountResult'
    currentOperator: 'CurrentOperatorResult'
    currentOperatorBids: 'CurrentUserBidsResult'
    currentOperatorDonations: 'CurrentOperatorDonationsResult'
    currentOperatorMedia: 'CurrentOperatorMediaResult'
    currentUserAds: 'CurrentUserAdsResult'
    currentUserMedia: 'CurrentUserMediaResult'
    currentUserOperatorBookings: 'CurrentUserBookingsResult'
    currentUserOwnerBookings: 'CurrentUserBookingsResult'
    donationById: 'DonationByIdResult'
    donationReceipts: 'DonationReceiptsResult'
    donations: 'DonationsResult'
    genderOptionById: 'GenderOptionByIdResult'
    gendersOptions: 'GenderOptionsResult'
    getCronStatus: 'GetCronStatusResult'
    hostingOptionById: 'HostingOptionByIdResult'
    hostingsOptions: 'HostingOptionsResult'
    languageOptionById: 'LanguageOptionByIdResult'
    languagesOptions: 'LanguageOptionsResult'
    mediaById: 'MediaByIdResult'
    medias: 'MediasResult'
    operatorById: 'OperatorByIdResult'
    partnerById: 'PartnerByIdResult'
    receiptById: 'DonationReceiptByIdResult'
    reviewById: 'ReviewByIdResult'
    reviews: 'ReviewsResult'
    searchAds: 'SearchAdsResult'
    searchDonationReceipts: 'SearchDonationReceiptsResult'
    searchDonations: 'SearchDonationsResult'
    searchOperators: 'SearchOperatorsResult'
    searchPartners: 'SearchPartnersResult'
    serviceOptionById: 'ServiceOptionByIdResult'
    servicesOptions: 'ServiceOptionsResult'
    specieOptionById: 'SpecieOptionByIdResult'
    speciesOptions: 'SpecieOptionsResult'
    staffById: 'StaffByIdResult'
    userById: 'UserByIdResult'
  }
  ReviewsList: { // field return type name
    reviews: 'Review'
  }
  ServiceOption: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    nameEn: 'String'
    nameFr: 'String'
    updatedAt: 'DateTime'
  }
  ServiceOptionsList: { // field return type name
    serviceOptions: 'ServiceOption'
  }
  SharedMedia: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    mediaType: 'MediaType'
    operator: 'Operator'
    operatorId: 'ID'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  SpecieOption: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    nameEn: 'String'
    nameFr: 'String'
    updatedAt: 'DateTime'
  }
  SpecieOptionsList: { // field return type name
    specieOptions: 'SpecieOption'
  }
  Staff: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    phoneNumber: 'String'
    updatedAt: 'DateTime'
  }
  StaffsList: { // field return type name
    staffs: 'Staff'
  }
  StorageInfos: { // field return type name
    mediaId: 'ID'
    signedRequest: 'String'
    url: 'String'
  }
  StripePayment: { // field return type name
    booking: 'Booking'
    bookingId: 'ID'
    createdAt: 'DateTime'
    errorCode: 'String'
    id: 'String'
    status: 'PaymentStatus'
    updatedAt: 'DateTime'
  }
  Subscription: { // field return type name
    bookingByIdChatSub: 'BookingMessageSubscriptionResult'
    errorsEmailCronSub: 'CronSubscriptionsResult'
    newlyCreatedBookingsAsSitterSub: 'BookingSubscriptionResult'
    pendingPaymentCronSub: 'CronSubscriptionsResult'
    setupIntentCronSub: 'CronSubscriptionsResult'
    userBookingsMessagesChangesSub: 'BookingMessageSubscriptionResult'
    userBookingsStatusChangesSub: 'BookingSubscriptionResult'
  }
  UnableToProcessError: { // field return type name
    code: 'ErrorCode'
    message: 'ErrorMessage'
  }
  User: { // field return type name
    accountId: 'ID'
    createdAt: 'DateTime'
    firstName: 'String'
    id: 'String'
    lastName: 'String'
    updatedAt: 'DateTime'
  }
  UserAuthenticationError: { // field return type name
    code: 'ErrorCode'
    message: 'ErrorMessage'
  }
  UserBookingMessage: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    medias: 'Media'
    readAt: 'DateTime'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  UserClaim: { // field return type name
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    reason: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  UserForbiddenError: { // field return type name
    code: 'ErrorCode'
    message: 'ErrorMessage'
  }
  UserMedia: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    mediaType: 'MediaType'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  UserReview: { // field return type name
    body: 'String'
    booking: 'Booking'
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    score: 'Float'
    title: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  UsersList: { // field return type name
    users: 'User'
  }
  Actor: { // field return type name
    accountId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    updatedAt: 'DateTime'
  }
  BookingMessage: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    medias: 'Media'
    readAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  Claim: { // field return type name
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    reason: 'String'
    updatedAt: 'DateTime'
  }
  Media: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    mediaType: 'MediaType'
    storeUrl: 'URL'
    updatedAt: 'DateTime'
  }
  Node: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    updatedAt: 'DateTime'
  }
  Operator: { // field return type name
    acceptedSpecieOptionsIds: 'String'
    accountId: 'ID'
    calendarUpdate: 'DateTime'
    createdAt: 'DateTime'
    description: 'String'
    hostingOptionId: 'String'
    id: 'String'
    languageOptionIds: 'String'
    mainMediaId: 'String'
    ownAnimalsSpecieOptionsIds: 'String'
    partnerId: 'String'
    partnerPercentage: 'Int'
    stripeAccountId: 'String'
    updatedAt: 'DateTime'
  }
  Payment: { // field return type name
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    status: 'PaymentStatus'
    updatedAt: 'DateTime'
  }
  Review: { // field return type name
    body: 'String'
    booking: 'Booking'
    bookingId: 'ID'
    createdAt: 'DateTime'
    id: 'String'
    score: 'Float'
    title: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authorizePayment: { // args
      id: string; // ID!
    }
    bidForBookingAd: { // args
      id: string; // ID!
    }
    cancelBooking: { // args
      input: NexusGenInputs['CancelBookingInput']; // CancelBookingInput!
    }
    cancelOnGoingBooking: { // args
      input: NexusGenInputs['CancelOnGoingBookingInput']; // CancelOnGoingBookingInput!
    }
    confirmBooking: { // args
      input: NexusGenInputs['ConfirmBookingInput']; // ConfirmBookingInput!
    }
    createAccount: { // args
      input: NexusGenInputs['CreateAccountInput']; // CreateAccountInput!
    }
    createAd: { // args
      input: NexusGenInputs['CreateBookingAdInput']; // CreateBookingAdInput!
    }
    createBooking: { // args
      input: NexusGenInputs['CreateBookingInput']; // CreateBookingInput!
    }
    createBookingClaim: { // args
      input: NexusGenInputs['CreateBookingClaimInput']; // CreateBookingClaimInput!
    }
    createBookingMessage: { // args
      input: NexusGenInputs['CreateBookingMessageInput']; // CreateBookingMessageInput!
    }
    createDonationReceipt: { // args
      input: NexusGenInputs['CreateDonationReceiptInput']; // CreateDonationReceiptInput!
    }
    createGenderOption: { // args
      input: NexusGenInputs['CreateGenderOptionInput']; // CreateGenderOptionInput!
    }
    createHostingOption: { // args
      input: NexusGenInputs['CreateHostingOptionInput']; // CreateHostingOptionInput!
    }
    createIndividualOperator: { // args
      input: NexusGenInputs['CreateIndividualOperatorInput']; // CreateIndividualOperatorInput!
    }
    createInvidualOperatorCoreServices: { // args
      input: NexusGenInputs['CreateInvidualOperatorCoreServicesInput']; // CreateInvidualOperatorCoreServicesInput!
    }
    createInvidualOperatorExtraServices: { // args
      input: NexusGenInputs['InvidualOperatorExtraServicesInput']; // InvidualOperatorExtraServicesInput!
    }
    createLanguageOption: { // args
      input: NexusGenInputs['CreateLanguageOptionInput']; // CreateLanguageOptionInput!
    }
    createMedia: { // args
      input: NexusGenInputs['CreateMediaInput']; // CreateMediaInput!
    }
    createOperatorAvailability: { // args
      input: NexusGenInputs['CreateOperatorAvailabilityInput']; // CreateOperatorAvailabilityInput!
    }
    createPartner: { // args
      input: NexusGenInputs['CreatePartnerInput']; // CreatePartnerInput!
    }
    createReview: { // args
      input: NexusGenInputs['CreateReviewInput']; // CreateReviewInput!
    }
    createServiceOption: { // args
      input: NexusGenInputs['CreateServiceOptionInput']; // CreateServiceOptionInput!
    }
    createSpecieOption: { // args
      input: NexusGenInputs['CreateSpecieOptionInput']; // CreateSpecieOptionInput!
    }
    createStaffAccount: { // args
      input: NexusGenInputs['CreateStaffAccountInput']; // CreateStaffAccountInput!
    }
    deleteAccount: { // args
      confirmPassword: string; // String!
    }
    deleteBookingAd: { // args
      id: string; // ID!
    }
    deleteBookingMessage: { // args
      id: string; // ID!
    }
    deleteClaim: { // args
      id: string; // ID!
    }
    deleteCoreIndividualOperatorService: { // args
      id: string; // ID!
    }
    deleteDonationReceipt: { // args
      id: string; // ID!
    }
    deleteExtraIndividualOperatorService: { // args
      id: string; // ID!
    }
    deleteGenderOption: { // args
      id: string; // ID!
    }
    deleteHostingOption: { // args
      id: string; // ID!
    }
    deleteLanguageOption: { // args
      id: string; // ID!
    }
    deleteMedia: { // args
      mediaId: string; // ID!
    }
    deleteOperatorAvailability: { // args
      id: string; // ID!
    }
    deletePartner: { // args
      id: string; // ID!
    }
    deleteReview: { // args
      id: string; // ID!
    }
    deleteServiceOption: { // args
      id: string; // ID!
    }
    deleteSpecieOption: { // args
      id: string; // ID!
    }
    lostPassword: { // args
      email: string; // String!
    }
    modifyEmail: { // args
      email: string; // String!
    }
    modifyPassword: { // args
      newPassword: string; // String!
      password: string; // String!
    }
    removeBidForBookingAd: { // args
      id: string; // ID!
    }
    resetPassword: { // args
      input: NexusGenInputs['ResetPasswordInput']; // ResetPasswordInput!
    }
    sendVerificationEmail: { // args
      email: string; // String!
    }
    setAsRead: { // args
      input: NexusGenInputs['SetBookingMessagesAsReadInput']; // SetBookingMessagesAsReadInput!
    }
    signIn: { // args
      input: NexusGenInputs['EmailAndPasswordInput']; // EmailAndPasswordInput!
    }
    startCron: { // args
      cronName: string; // String!
    }
    stopCron: { // args
      cronName: string; // String!
    }
    updateBookingAd: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateBookingAdInput']; // UpdateBookingAdInput!
    }
    updateBookingMessage: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateBookingMessageInput']; // UpdateBookingMessageInput!
      saveAs: string; // String!
    }
    updateBookingPaymentStatus: { // args
      input: NexusGenInputs['UpdateBookingPaymentStatusInput']; // UpdateBookingPaymentStatusInput!
    }
    updateDonationReceipt: { // args
      input: NexusGenInputs['UpdateDonationReceiptInput']; // UpdateDonationReceiptInput!
    }
    updateGenderOption: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateGenderOptionInput']; // UpdateGenderOptionInput!
    }
    updateHostingOption: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateHostingOptionInput']; // UpdateHostingOptionInput!
    }
    updateIndividualOperator: { // args
      input: NexusGenInputs['UpdateIndividualOperatorInput']; // UpdateIndividualOperatorInput!
    }
    updateInvidualOperatorCoreServices: { // args
      input: NexusGenInputs['UpdateInvidualOperatorCoreServicesInput']; // UpdateInvidualOperatorCoreServicesInput!
    }
    updateInvidualOperatorExtraServices: { // args
      id: string; // ID!
      input: NexusGenInputs['InvidualOperatorExtraServicesInput']; // InvidualOperatorExtraServicesInput!
    }
    updateLanguageOption: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateLanguageOptionInput']; // UpdateLanguageOptionInput!
    }
    updatePartner: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdatePartnerInput']; // UpdatePartnerInput!
    }
    updateReview: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateReviewInput']; // UpdateReviewInput!
      saveAs: string; // String!
    }
    updateServiceOption: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateServiceOptionInput']; // UpdateServiceOptionInput!
    }
    updateSpecieOption: { // args
      id: string; // ID!
      input: NexusGenInputs['UpdateSpecieOptionInput']; // UpdateSpecieOptionInput!
    }
    verifyUser: { // args
      input: NexusGenInputs['VerifyUserInput']; // VerifyUserInput!
    }
  }
  Query: {
    accountById: { // args
      id: string; // ID!
    }
    adById: { // args
      id: string; // ID!
    }
    bookingById: { // args
      id: string; // ID!
    }
    bookingMessageById: { // args
      id: string; // ID!
    }
    bookingsWithPaymentStatus: { // args
      input: NexusGenInputs['BookingWithPaymentStatusInput']; // BookingWithPaymentStatusInput!
    }
    claimById: { // args
      id: string; // ID!
    }
    currentUserOperatorBookings: { // args
      input: NexusGenInputs['CurrentUserBookingFilterInput']; // CurrentUserBookingFilterInput!
    }
    currentUserOwnerBookings: { // args
      input: NexusGenInputs['CurrentUserBookingFilterInput']; // CurrentUserBookingFilterInput!
    }
    donationById: { // args
      id: string; // ID!
    }
    genderOptionById: { // args
      id: string; // ID!
    }
    getCronStatus: { // args
      cronName: string; // String!
    }
    hostingOptionById: { // args
      id: string; // ID!
    }
    languageOptionById: { // args
      id: string; // ID!
    }
    mediaById: { // args
      id: string; // ID!
    }
    operatorById: { // args
      id: string; // ID!
    }
    partnerById: { // args
      id: string; // ID!
    }
    receiptById: { // args
      id: string; // ID!
    }
    reviewById: { // args
      id: string; // ID!
    }
    searchAds: { // args
      input: NexusGenInputs['SearchAdsInput']; // SearchAdsInput!
    }
    searchDonationReceipts: { // args
      input: NexusGenInputs['SearchDonationReceiptsInput']; // SearchDonationReceiptsInput!
    }
    searchDonations: { // args
      input: NexusGenInputs['SearchDonationsInput']; // SearchDonationsInput!
    }
    searchOperators: { // args
      input: NexusGenInputs['SearchOperatorsInput']; // SearchOperatorsInput!
    }
    searchPartners: { // args
      input: NexusGenInputs['SearchPartnersInput']; // SearchPartnersInput!
    }
    serviceOptionById: { // args
      id: string; // ID!
    }
    specieOptionById: { // args
      id: string; // ID!
    }
    staffById: { // args
      id: string; // ID!
    }
    userById: { // args
      id: string; // ID!
    }
  }
  Subscription: {
    bookingByIdChatSub: { // args
      bookingId: string; // ID!
    }
    newlyCreatedBookingsAsSitterSub: { // args
      sitterId?: string | null; // ID
    }
    userBookingsMessagesChangesSub: { // args
      authorId?: string | null; // ID
      bookingIds?: Array<string | null> | null; // [ID]
    }
    userBookingsStatusChangesSub: { // args
      bookingIds?: Array<string | null> | null; // [ID]
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AccountByIdResult: "Account" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  AccountResult: "Account" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  AdByIdResult: "BookingAd" | "InvalidArgumentsError" | "NotFoundError"
  AllAccountsResult: "AccountsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  AllOperatorsResult: "Operators" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  AllStaffsResult: "StaffsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  AllUsersResult: "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError" | "UsersList"
  AuthorizePaymentResult: "AuthorizedPayment" | "InvalidOperatorError" | "NotFoundError" | "OperatorCannotProcessPaymentsError" | "UnableToProcessError" | "UserAuthenticationError"
  BidForBookingAdResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  BookingByIdResult: "Booking" | "InvalidArgumentsError" | "NotFoundError"
  BookingMessageByIdResult: "InvalidArgumentsError" | "NotFoundError" | "OperatorBookingMessage" | "UserAuthenticationError" | "UserBookingMessage" | "UserForbiddenError"
  BookingMessageSubscriptionResult: "OperatorBookingMessage" | "UserAuthenticationError" | "UserBookingMessage" | "UserForbiddenError"
  BookingMessagesResult: "BookingMessagesList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  BookingPayment: "StripePayment"
  BookingSubscriptionResult: "Booking" | "UserAuthenticationError" | "UserForbiddenError"
  BookingWithPaymentStatusResult: "BookingsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  BookingsResult: "BookingsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CancelBookingResult: "Booking" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  CancelOnGoingBookingResult: "Booking" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  ClaimByIdResult: "NotFoundError" | "OperatorClaim" | "UserAuthenticationError" | "UserClaim" | "UserForbiddenError"
  ClaimsResult: "ClaimsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  ConfirmBookingResult: "Booking" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  CreateAccountResult: "Account" | "InvalidArgumentsError" | "UnableToProcessError"
  CreateBookingAdResult: "BookingAd" | "InvalidArgumentsError" | "PreExistingUserAdError" | "UnableToProcessError" | "UserAuthenticationError"
  CreateBookingClaimResult: "InvalidArgumentsError" | "OperatorClaim" | "UnableToProcessError" | "UserAuthenticationError" | "UserClaim"
  CreateBookingMessageResult: "InvalidArgumentsError" | "OperatorBookingMessage" | "UnableToProcessError" | "UserAuthenticationError" | "UserBookingMessage"
  CreateBookingResult: "Booking" | "CannotBookHimSelfError" | "ExistingBookingError" | "InvalidArgumentsError" | "NotFoundError" | "NotSupportedExtraServiceError" | "UnableToProcessError" | "UserAuthenticationError"
  CreateDonationReceiptResult: "DonationReceipt" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateGenderOptionResult: "GenderOption" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateHostingOptionResult: "HostingOption" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateIndividualOperatorResult: "IndividualOperator" | "InvalidArgumentsError" | "UnableToProcessError"
  CreateInvidualOperatorCoreServicesResult: "BooleanResult" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError"
  CreateInvidualOperatorExtraServicesResult: "BooleanResult" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError"
  CreateLanguageOptionResult: "InvalidArgumentsError" | "LanguageOption" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateMediaResult: "InvalidArgumentsError" | "StorageInfos" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateOperatorAvailabilityResult: "BooleanResult" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError"
  CreatePartnerResult: "InvalidArgumentsError" | "Partner" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateReviewResult: "InvalidArgumentsError" | "OperatorReview" | "UnableToProcessError" | "UserAuthenticationError" | "UserReview"
  CreateServiceOptionResult: "InvalidArgumentsError" | "ServiceOption" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateSpecieOptionResult: "InvalidArgumentsError" | "SpecieOption" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CreateStaffAccountResult: "Account" | "InvalidArgumentsError" | "UnableToProcessError"
  CronSubscriptionsResult: "BooleanResult" | "UserAuthenticationError" | "UserForbiddenError"
  CurrentAccountResult: "Account" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  CurrentOperatorDonationsResult: "DonationsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CurrentOperatorMediaResult: "NotFoundError" | "OperatorMedia" | "SharedMedia" | "UserAuthenticationError" | "UserForbiddenError"
  CurrentOperatorResult: "IndividualOperator" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  CurrentUserAdsResult: "BookingAds" | "UnableToProcessError"
  CurrentUserBidsResult: "BookingAdBids" | "UnableToProcessError"
  CurrentUserBookingsResult: "BookingsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  CurrentUserMediaResult: "NotFoundError" | "SharedMedia" | "UserAuthenticationError" | "UserForbiddenError" | "UserMedia"
  DeleteAccountResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError"
  DeleteBookingAdResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteBookingMessageResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeleteClaimResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeleteDonationReceiptResult: "BooleanResult" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteGenderOptionResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteHostingOptionResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteInvidualOperatorCoreServicesResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeleteInvidualOperatorExtraServicesResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeleteLanguageOptionResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteMediaResult: "BooleanResult" | "InvalidArgumentsError" | "IsActiveOperatorMainMediaError" | "IsActiveOperatorWithNoReplacementMediaError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeleteOperatorAvailabilityResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeletePartnerResult: "BooleanResult" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteReviewResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  DeleteServiceOptionResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  DeleteSpecieOptionResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError" | "UserForbiddenError"
  DonationByIdResult: "Donation" | "InvalidArgumentsError" | "NotFoundError"
  DonationReceiptByIdResult: "DonationReceipt" | "InvalidArgumentsError" | "NotFoundError"
  DonationReceiptsResult: "DonationReceiptsList" | "UnableToProcessError"
  DonationsResult: "DonationsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  GenderOptionByIdResult: "GenderOption" | "InvalidArgumentsError" | "NotFoundError"
  GenderOptionsResult: "GenderOptionsList" | "UnableToProcessError"
  GetCronStatusResult: "CronStatus" | "UserAuthenticationError" | "UserForbiddenError"
  HostingOptionByIdResult: "Account" | "InvalidArgumentsError" | "NotFoundError"
  HostingOptionsResult: "HostingOptionsList" | "UnableToProcessError"
  IndividualOperatorResult: "IndividualOperator" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  LanguageOptionByIdResult: "InvalidArgumentsError" | "LanguageOption" | "NotFoundError"
  LanguageOptionsResult: "LanguageOptionsList" | "UnableToProcessError"
  LostPasswordResult: "BooleanResult" | "NotFoundError"
  MediaByIdResult: "InvalidArgumentsError" | "NotFoundError" | "OperatorMedia" | "SharedMedia" | "UserAuthenticationError" | "UserForbiddenError" | "UserMedia"
  MediasResult: "MediasList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  ModifyEmailResult: "Account" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  ModifyPasswordResult: "Account" | "InvalidArgumentsError" | "NotFoundError" | "UserAuthenticationError"
  OperatorByIdResult: "IndividualOperator" | "NotFoundError"
  PartnerByIdResult: "NotFoundError" | "Partner"
  PartnersResult: "PartnersList" | "UnableToProcessError"
  RemoveBidForBookingAdResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  ResetPasswordResult: "BooleanResult" | "InvalidArgumentsError" | "UnableToProcessError"
  ReviewByIdResult: "InvalidArgumentsError" | "NotFoundError" | "OperatorReview" | "UserAuthenticationError" | "UserForbiddenError" | "UserReview"
  ReviewsResult: "ReviewsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  SearchAdsResult: "BookingAds" | "UnableToProcessError"
  SearchDonationReceiptsResult: "DonationReceiptsList" | "InvalidArgumentsError" | "UnableToProcessError"
  SearchDonationsResult: "DonationsList" | "InvalidArgumentsError" | "UnableToProcessError"
  SearchOperatorsResult: "Operators" | "UnableToProcessError"
  SearchPartnersResult: "PartnersList" | "UnableToProcessError"
  SendVerificationEmailResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError"
  ServiceOptionByIdResult: "InvalidArgumentsError" | "NotFoundError" | "ServiceOption" | "UserAuthenticationError" | "UserForbiddenError"
  ServiceOptionsResult: "ServiceOptionsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  SetBookingMessagesAsReadResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  SignInResult: "Account" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError"
  SignOutResult: "BooleanResult" | "UserAuthenticationError"
  SpecieOptionByIdResult: "InvalidArgumentsError" | "NotFoundError" | "SpecieOption" | "UserAuthenticationError" | "UserForbiddenError"
  SpecieOptionsResult: "SpecieOptionsList" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  StaffByIdResult: "InvalidArgumentsError" | "NotFoundError" | "Staff" | "UserAuthenticationError" | "UserForbiddenError"
  StartCronResult: "BooleanResult" | "UserAuthenticationError" | "UserForbiddenError"
  StopCronResult: "BooleanResult" | "UserAuthenticationError" | "UserForbiddenError"
  UpdateBookingAdResult: "BookingAd" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError"
  UpdateBookingMessageResult: "InvalidArgumentsError" | "NotFoundError" | "OperatorBookingMessage" | "UnableToProcessError" | "UserAuthenticationError" | "UserBookingMessage"
  UpdateBookingPaymentStatusResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "PaymentProcessorError" | "UnableToProcessError" | "UserAuthenticationError"
  UpdateDonationReceiptResult: "DonationReceipt" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UpdateGenderOptionResult: "GenderOption" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UpdateHostingOptionResult: "HostingOption" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UpdateIndividualOperatorResult: "IndividualOperator" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError"
  UpdateInvidualOperatorCoreServicesResult: "BooleanResult" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError"
  UpdateInvidualOperatorExtraServicesResult: "BooleanResult" | "InvalidArgumentsError" | "UnableToProcessError" | "UserAuthenticationError"
  UpdateLanguageOptionResult: "InvalidArgumentsError" | "LanguageOption" | "NotFoundError" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UpdatePartnerResult: "InvalidArgumentsError" | "Partner" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UpdateReviewResult: "InvalidArgumentsError" | "NotFoundError" | "OperatorReview" | "UnableToProcessError" | "UserAuthenticationError" | "UserReview"
  UpdateServiceOptionResult: "InvalidArgumentsError" | "NotFoundError" | "ServiceOption" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UpdateSpecieOptionResult: "InvalidArgumentsError" | "NotFoundError" | "SpecieOption" | "UnableToProcessError" | "UserAuthenticationError" | "UserForbiddenError"
  UserByIdResult: "InvalidArgumentsError" | "NotFoundError" | "User" | "UserAuthenticationError" | "UserForbiddenError"
  VerifyUserResult: "BooleanResult" | "InvalidArgumentsError" | "NotFoundError" | "UnableToProcessError"
  Actor: "IndividualOperator" | "User"
  BookingMessage: "OperatorBookingMessage" | "UserBookingMessage"
  Claim: "OperatorClaim" | "UserClaim"
  Media: "DonationReceiptMedia" | "LanguageOptionMedia" | "MessageMedia" | "OperatorMedia" | "PartnerMedia" | "SharedMedia" | "UserMedia"
  Node: "Account" | "Booking" | "BookingAd" | "BookingAdBid" | "Donation" | "DonationReceipt" | "DonationReceiptMedia" | "GenderOption" | "HostingOption" | "IndividualOperator" | "IndividualOperatorCoreService" | "IndividualOperatorExtraService" | "LanguageOption" | "LanguageOptionMedia" | "Location" | "MessageMedia" | "OperatorAvailability" | "OperatorBookingMessage" | "OperatorClaim" | "OperatorMedia" | "OperatorReview" | "Partner" | "PartnerMedia" | "ServiceOption" | "SharedMedia" | "SpecieOption" | "Staff" | "StripePayment" | "User" | "UserBookingMessage" | "UserClaim" | "UserMedia" | "UserReview"
  Operator: "IndividualOperator"
  Payment: "StripePayment"
  Review: "OperatorReview" | "UserReview"
}

export interface NexusGenTypeInterfaces {
  Account: "Node"
  Booking: "Node"
  BookingAd: "Node"
  BookingAdBid: "Node"
  Donation: "Node"
  DonationReceipt: "Node"
  DonationReceiptMedia: "Media" | "Node"
  GenderOption: "Node"
  HostingOption: "Node"
  IndividualOperator: "Actor" | "Node" | "Operator"
  IndividualOperatorCoreService: "Node"
  IndividualOperatorExtraService: "Node"
  LanguageOption: "Node"
  LanguageOptionMedia: "Media" | "Node"
  Location: "Node"
  MessageMedia: "Media" | "Node"
  OperatorAvailability: "Node"
  OperatorBookingMessage: "BookingMessage" | "Node"
  OperatorClaim: "Claim" | "Node"
  OperatorMedia: "Media" | "Node"
  OperatorReview: "Node" | "Review"
  Partner: "Node"
  PartnerMedia: "Media" | "Node"
  ServiceOption: "Node"
  SharedMedia: "Media" | "Node"
  SpecieOption: "Node"
  Staff: "Node"
  StripePayment: "Node" | "Payment"
  User: "Actor" | "Node"
  UserBookingMessage: "BookingMessage" | "Node"
  UserClaim: "Claim" | "Node"
  UserMedia: "Media" | "Node"
  UserReview: "Node" | "Review"
  Actor: "Node"
  BookingMessage: "Node"
  Claim: "Node"
  Media: "Node"
  Operator: "Actor" | "Node"
  Payment: "Node"
  Review: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "Account" | "AccountsList" | "AuthorizedPayment" | "Booking" | "BookingAd" | "BookingAdBid" | "BookingAdBids" | "BookingAds" | "BookingMessagesList" | "BookingsList" | "BooleanResult" | "CannotBookHimSelfError" | "ClaimsList" | "CronStatus" | "Donation" | "DonationReceipt" | "DonationReceiptMedia" | "DonationReceiptsList" | "DonationsList" | "ExistingBookingError" | "GenderOption" | "GenderOptionsList" | "HostingOption" | "HostingOptionsList" | "IndividualOperator" | "IndividualOperatorCoreService" | "IndividualOperatorExtraService" | "InvalidArgumentsError" | "InvalidOperatorError" | "IsActiveOperatorMainMediaError" | "IsActiveOperatorWithNoReplacementMediaError" | "LanguageOption" | "LanguageOptionMedia" | "LanguageOptionsList" | "Location" | "MediasList" | "MessageMedia" | "NotFoundError" | "NotSupportedExtraServiceError" | "OperatorAvailability" | "OperatorBookingMessage" | "OperatorCannotProcessPaymentsError" | "OperatorClaim" | "OperatorMedia" | "OperatorReview" | "Operators" | "Partner" | "PartnerMedia" | "PartnersList" | "PaymentProcessorError" | "PreExistingOperatorBidError" | "PreExistingUserAdError" | "ReviewsList" | "ServiceOption" | "ServiceOptionsList" | "SharedMedia" | "SpecieOption" | "SpecieOptionsList" | "Staff" | "StaffsList" | "StorageInfos" | "StripePayment" | "UnableToProcessError" | "User" | "UserAuthenticationError" | "UserBookingMessage" | "UserClaim" | "UserForbiddenError" | "UserMedia" | "UserReview" | "UsersList";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: ApiContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Validation for an individual field. Returning "undefined"
     * or "Promise<undefined>" means the field can be accessed.
     * Returning InvalidArgumentsError or "Promise<InvalidArgumentsError>" will prevent the resolver from executing.
     */
    validation?: FieldValidationResolver<TypeName, FieldName>
    /**
     * Authorization for an individual field. Returning "undefined"
     * or "Promise<undefined>" means the field can be accessed.
     * Returning "UserAuthenticationError" will prevent the resolver from executing.
     */
    authorization?: FieldAuthorizationResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}