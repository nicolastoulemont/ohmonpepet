### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account implements Node {
  createdAt: DateTime
  email: EmailAddress

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
  user: User
  verifiedAt: DateTime
}

"""The result of the accountById query"""
union AccountByIdResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""Return an account or account related errors"""
union AccountResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""List of accounts"""
type AccountsList {
  accounts: [Account]
}

"""Represent the minimal fields required for any actors"""
interface Actor implements Node {
  accountId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
}

"""The result of the accounts query"""
union AllAccountsResult = AccountsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the allUsers query"""
union AllUsersResult = UnableToProcessError | UserAuthenticationError | UserForbiddenError | UsersList

type Booking implements Node {
  animalsIds: [ID]
  applictionFeeAmount: PositiveFloat
  canceled: Boolean
  canceledBy: String
  canceledReason: String
  claims: [Claim]
  createdAt: DateTime
  endDate: Date

  """GUID for a resource"""
  id: String!
  messages: [BookingMessage]
  operator: Operator
  operatorConfirmationDate: DateTime
  ownerConfirmationDate: DateTime
  paid: Boolean
  payment: BookingPayment
  priceWithOutApplicationFee: PositiveFloat
  selectedOptions: [JSON]
  service: ServiceOption
  startDate: Date
  status: BookingStatus
  underReview: Boolean
  updatedAt: DateTime
  user: User
}

"""The minimum required fields for message types"""
interface BookingMessage implements Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
}

"""The result of the accountById query"""
union BookingMessageByIdResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""List of booking messages"""
type BookingMessagesList {
  bookingMessages: [BookingMessage]
}

"""The result of the bookingMessages query"""
union BookingMessagesResult = BookingMessagesList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

union BookingPayment = StripePayment

"""The booking different possible status"""
enum BookingStatus {
  BOTH_CONFIRMED
  CANCELED
  NONE_CONFIRMED
  PAID
  PAYMENT_AUTHORIZED
  PENDING_OWNER_VALIDATION
  PENDING_SITTER_VALIDATION
  UNDER_REVIEW
}

type BooleanResult {
  success: Boolean
}

interface Claim implements Node {
  bookingId: ID!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  reason: String!
  updatedAt: DateTime
}

union ClaimByIdResult = NotFoundError | OperatorClaim | UserAuthenticationError | UserClaim | UserForbiddenError

"""List of booking messages"""
type ClaimsList {
  claims: [Claim]
}

"""The result of the bookingMessages query"""
union ClaimsResult = ClaimsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateAccountInput {
  email: EmailAddress!
  firstName: String!
  password: String!
}

"""The result of the createAccount mutation"""
union CreateAccountResult = Account | InvalidArgumentsError | UnableToProcessError

input CreateBookingClaimInput {
  bookingId: String!
  reason: String!
  saveAs: SaveAsValue!
}

union CreateBookingClaimResult = InvalidArgumentsError | OperatorClaim | UnableToProcessError | UserAuthenticationError | UserClaim

input CreateBookingMessageInput {
  bookingId: String!
  content: String!
  saveAs: String!
}

union CreateBookingMessageResult = InvalidArgumentsError | OperatorBookingMessage | UnableToProcessError | UserAuthenticationError | UserBookingMessage

input CreateGenderOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateGenderOptionResult = GenderOption | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateHostingOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateHostingOptionResult = HostingOption | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateIndividualOperatorInput {
  acceptedSpecieOptionsIds: [ID!]!
  birthDate: Date!
  description: String!
  genderOptionId: String!
  hostingOptionId: String!
  languageOptionIds: [ID!]!
  mainMediaId: ID!
  ownAnimalsSpecieOptionsIds: [ID!]!
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: ID
}

"""The result of the createIndividualOperator mutation"""
union CreateIndividualOperatorResult = IndividualOperator | InvalidArgumentsError | UnableToProcessError

input CreateLanguageOptionInput {
  mediaId: String!
  nameEn: String!
  nameFr: String!
}

union CreateLanguageOptionResult = InvalidArgumentsError | LanguageOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateMediaInput {
  fileName: String!
  fileType: String!
  saveAs: String!
}

union CreateMediaResult = InvalidArgumentsError | StorageInfos | UnableToProcessError | UserAuthenticationError

input CreateServiceOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateServiceOptionResult = InvalidArgumentsError | ServiceOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateSpecieOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateSpecieOptionResult = InvalidArgumentsError | SpecieOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the currentAccount query"""
union CurrentAccountResult = Account | NotFoundError | UserAuthenticationError | UserForbiddenError

"""The result of the currentOperatorMedia query"""
union CurrentOperatorMediaResult = NotFoundError | OperatorMedia | SharedMedia | UserAuthenticationError | UserForbiddenError

"""The result of the currentUserMedia query"""
union CurrentUserMediaResult = NotFoundError | SharedMedia | UserAuthenticationError | UserForbiddenError | UserMedia

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The result of the deleteAccount mutation"""
union DeleteAccountResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError

"""The result of the deleteBookingMessage mutation"""
union DeleteBookingMessageResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteGenderOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

union DeleteHostingOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

union DeleteLanguageOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""The result of the deleteMedia mutation"""
union DeleteMediaResult = BooleanResult | InvalidArgumentsError | IsActiveOperatorMainMediaError | IsActiveOperatorWithNoReplacementMediaError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteServiceOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

union DeleteSpecieOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailAndPasswordInput {
  email: EmailAddress!
  password: String!
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type GenderOption implements Node {
  adminId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the genderOptionById query"""
union GenderOptionByIdResult = GenderOption | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""List of genderOptions"""
type GenderOptionsList {
  genderOptions: [GenderOption]
}

"""The result of the gendersOptions query"""
union GenderOptionsResult = GenderOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type HostingOption implements Node {
  adminId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the hostingOptionById query"""
union HostingOptionByIdResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""List of HostingOptions"""
type HostingOptionsList {
  hostingOptions: [HostingOption]
}

"""The result of the hostingsOptions query"""
union HostingOptionsResult = HostingOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type IndividualOperator implements Actor & Node & Operator {
  acceptedSpecieOptionsIds: [String]
  account: Account
  accountId: ID
  birthDate: Date
  calendarUpdate: DateTime
  createdAt: DateTime
  description: String
  genderOptionId: String
  hostingOptionId: String

  """GUID for a resource"""
  id: String!
  languageOptionIds: [String]
  mainMediaId: String
  medias: [Media]
  ownAnimalsSpecieOptionsIds: [String]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: String
  updatedAt: DateTime
}

"""Return an individual operator or related errors"""
union IndividualOperatorResult = IndividualOperator | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type InvalidArgument {
  key: String!
  message: String!
}

type InvalidArgumentsError {
  code: ErrorCode!
  invalidArguments: [InvalidArgument]!
  message: ErrorMessage!
}

type IsActiveOperatorMainMediaError {
  activeOperatorMainMediaError: String!
}

type IsActiveOperatorWithNoReplacementMediaError {
  activeOperatorWithNoReplacementMediaError: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type LanguageOption implements Node {
  adminId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  media: Media
  mediaId: ID!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the languageOptionById query"""
union LanguageOptionByIdResult = InvalidArgumentsError | LanguageOption | NotFoundError | UserAuthenticationError | UserForbiddenError

"""List of languageOptions"""
type LanguageOptionsList {
  languageOptions: [LanguageOption]
}

"""The result of the languagesOptions query"""
union LanguageOptionsResult = LanguageOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

"""The result of the lostPassword mutation"""
union LostPasswordResult = BooleanResult | NotFoundError

"""The minimum required fields for media types"""
interface Media implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
}

"""The result of the mediaById query"""
union MediaByIdResult = InvalidArgumentsError | NotFoundError | OperatorMedia | SharedMedia | UserAuthenticationError | UserForbiddenError | UserMedia

"""Type of media accepted"""
enum MediaType {
  IMAGE
  VIDEO
}

"""List of medias"""
type MediasList {
  medias: [Media]
}

"""The result of the medias query"""
union MediasResult = MediasList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type MessageMedia implements Media & Node {
  bookingMessageId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  message: BookingMessage
  storeUrl: URL!
  updatedAt: DateTime
}

"""The result of the modifyEmail mutation"""
union ModifyEmailResult = Account | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

"""The result of the modifyPassword mutation"""
union ModifyPasswordResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountResult
  createBookingClaim(input: CreateBookingClaimInput!): CreateBookingClaimResult
  createBookingMessage(input: CreateBookingMessageInput!): CreateBookingMessageResult
  createGenderOption(input: CreateGenderOptionInput!): CreateGenderOptionResult
  createHostingOption(input: CreateHostingOptionInput!): CreateHostingOptionResult
  createIndividualOperator(input: CreateIndividualOperatorInput!): CreateIndividualOperatorResult
  createLanguageOption(input: CreateLanguageOptionInput!): CreateLanguageOptionResult
  createMedia(input: CreateMediaInput!): CreateMediaResult
  createServiceOption(input: CreateServiceOptionInput!): CreateServiceOptionResult
  createSpecieOption(input: CreateSpecieOptionInput!): CreateSpecieOptionResult

  """Access restricted to logged in user"""
  deleteAccount(confirmPassword: String!): DeleteAccountResult
  deleteBookingMessage(id: ID!): DeleteBookingMessageResult
  deleteGenderOption(id: ID!): DeleteGenderOptionResult
  deleteHostingOption(id: ID!): DeleteHostingOptionResult
  deleteLanguageOption(id: ID!): DeleteLanguageOptionResult
  deleteMedia(mediaId: ID!): DeleteMediaResult
  deleteServiceOption(id: ID!): DeleteServiceOptionResult
  deleteSpecieOption(id: ID!): DeleteSpecieOptionResult
  lostPassword(email: String!): LostPasswordResult

  """Access restricted to logged in user"""
  modifyEmail(email: String!): ModifyEmailResult

  """Access restricted to logged in user"""
  modifyPassword(newPassword: String!, password: String!): ModifyPasswordResult
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult
  sendVerificationEmail(email: String!): SendVerificationEmailResult
  setAsRead(input: SetBookingMessagesAsReadInput!): SetBookingMessagesAsReadResult
  signIn(input: EmailAndPasswordInput!): SignInResult

  """Access restricted to logged in user"""
  signOut: SignOutResult
  updateBookingMessage(id: ID!, input: UpdateBookingMessageInput!, saveAs: String!): UpdateBookingMessageResult
  updateGenderOption(id: ID!, input: UpdateGenderOptionInput!): UpdateGenderOptionResult
  updateHostingOption(id: ID!, input: UpdateHostingOptionInput!): UpdateHostingOptionResult
  updateIndividualOperator(input: CreateIndividualOperatorInput!): IndividualOperatorResult
  updateLanguageOption(id: ID!, input: UpdateLanguageOptionInput!): UpdateLanguageOptionResult
  updateServiceOption(id: ID!, input: UpdateServiceOptionInput!): UpdateServiceOptionResult
  updateSpecieOption(id: ID!, input: UpdateSpecieOptionInput!): UpdateSpecieOptionResult
  verifyUser(input: VerifyUserInput!): VerifyUserResult
}

interface Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
}

type NotFoundError {
  code: ErrorCode!
  message: ErrorMessage!
}

"""
Represent the required fields of commercial operators on the plateform.
"""
interface Operator implements Actor & Node {
  acceptedSpecieOptionsIds: [String]
  accountId: ID
  calendarUpdate: DateTime
  createdAt: DateTime
  description: String
  hostingOptionId: String

  """GUID for a resource"""
  id: String!
  languageOptionIds: [String]
  mainMediaId: String
  ownAnimalsSpecieOptionsIds: [String]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: String
  updatedAt: DateTime
}

type OperatorBookingMessage implements BookingMessage & Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  operator: Operator
  operatorId: ID
  readAt: DateTime
  updatedAt: DateTime
}

type OperatorClaim implements Claim & Node {
  bookingId: ID!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  operator: Operator
  operatorId: ID
  reason: String!
  updatedAt: DateTime
}

type OperatorMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  operator: Operator
  operatorId: ID
  storeUrl: URL!
  updatedAt: DateTime
}

interface Payment implements Node {
  bookingId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  status: PaymentStatus!
  updatedAt: DateTime
}

"""All possible payment status"""
enum PaymentStatus {
  AUTHORIZED_BUT_CANCELLED
  AUTHORIZED_REQUIRE_CAPTURE
  CAPTURED_AND_PAID
  ERROR_SENDING_AUTH_REQUIRED_MAIL
  ERROR_SENDING_INSUFFICIENT_FUNDS_MAIL
  ERROR_SENDING_UNKOWN_ERROR_MAIL
  FAILED_CAPTURE
  FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED
  FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED_MAIL_SENT
  FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS
  FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS_MAIL_SENT
  FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR
  FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR_MAIL_SENT
  PENDING_AUTHORIZATION
  SETUP_INTENT_CONFIRMED_REQUIRED_PAYMENT_INTENT_CREATION
  SETUP_INTENT_PENDING_CONFIRMATION
}

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

type Query {
  """Access restricted to admin users"""
  accountById(id: ID!): AccountByIdResult

  """Access restricted to admin users"""
  allAccounts: AllAccountsResult

  """Access restricted to admin users"""
  allUsers: AllUsersResult

  """Access restricted to admin users"""
  bookingMessageById(id: ID!): BookingMessageByIdResult

  """Access restricted to admin users"""
  bookingMessages: BookingMessagesResult
  claimById(id: ID!): ClaimByIdResult

  """Access restricted to admin users"""
  claims: ClaimsResult

  """Access restricted to logged in user"""
  currentAccount: CurrentAccountResult

  """Access restricted to logged in user"""
  currentOperatorMedia: CurrentOperatorMediaResult

  """Access restricted to logged in user"""
  currentUserMedia: CurrentUserMediaResult

  """Access restricted to admin users"""
  genderOptionById(id: ID!): GenderOptionByIdResult

  """Access restricted to admin users"""
  gendersOptions: GenderOptionsResult

  """Access restricted to admin users"""
  hostingOptionById(id: ID!): HostingOptionByIdResult

  """Access restricted to admin users"""
  hostingsOptions: HostingOptionsResult

  """Access restricted to admin users"""
  languageOptionById(id: ID!): LanguageOptionByIdResult

  """Access restricted to admin users"""
  languagesOptions: LanguageOptionsResult

  """Access restricted to admin users"""
  mediaById(id: ID!): MediaByIdResult

  """Access restricted to admin users"""
  medias: MediasResult

  """Access restricted to admin users"""
  serviceOptionById(id: ID!): ServiceOptionByIdResult

  """Access restricted to admin users"""
  servicesOptions: ServiceOptionsResult

  """Access restricted to admin users"""
  specieOptionById(id: ID!): SpecieOptionByIdResult

  """Access restricted to admin users"""
  speciesOptions: SpecieOptionsResult

  """Access restricted to admin users"""
  userById(id: ID!): UserByIdResult
}

input ResetPasswordInput {
  newPassword: String!
  token: JWT!
}

"""The result of the resetPassword mutation"""
union ResetPasswordResult = BooleanResult | InvalidArgumentsError | UnableToProcessError

"""A field whose value must be either: user, operator, admin"""
scalar SaveAsValue

"""The result of the sendVerificationEmail mutation"""
union SendVerificationEmailResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError

type ServiceOption implements Node {
  adminId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the serviceOptionById query"""
union ServiceOptionByIdResult = InvalidArgumentsError | NotFoundError | ServiceOption | UserAuthenticationError | UserForbiddenError

"""List of serviceOptions"""
type ServiceOptionsList {
  serviceOptions: [ServiceOption]
}

"""The result of the servicesOptions query"""
union ServiceOptionsResult = ServiceOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input SetBookingMessagesAsReadInput {
  ids: [ID!]!
  readAt: Date
}

"""The result of the setBookingMessageAsRead mutation"""
union SetBookingMessagesAsReadResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

type SharedMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  operator: Operator
  operatorId: ID
  storeUrl: URL!
  updatedAt: DateTime
  user: User
  userId: ID
}

"""The result of the signIn mutation"""
union SignInResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signOut mutation"""
union SignOutResult = BooleanResult | UserAuthenticationError

type SpecieOption implements Node {
  adminId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the specieOptionById query"""
union SpecieOptionByIdResult = InvalidArgumentsError | NotFoundError | SpecieOption | UserAuthenticationError | UserForbiddenError

"""List of specieOptions"""
type SpecieOptionsList {
  specieOptions: [SpecieOption]
}

"""The result of the speciesOptions query"""
union SpecieOptionsResult = SpecieOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type StorageInfos {
  signedRequest: String
  url: String
}

type StripePayment implements Node & Payment {
  booking: Booking
  bookingId: ID
  createdAt: DateTime
  errorCode: String

  """GUID for a resource"""
  id: String!
  status: PaymentStatus!
  updatedAt: DateTime
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type UnableToProcessError {
  code: ErrorCode!
  message: ErrorMessage!
}

input UpdateBookingMessageInput {
  content: String
  readAt: Date
}

union UpdateBookingMessageResult = InvalidArgumentsError | NotFoundError | OperatorBookingMessage | UnableToProcessError | UserAuthenticationError | UserBookingMessage

input UpdateGenderOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateGenderOptionResult = GenderOption | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateHostingOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateHostingOptionResult = HostingOption | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateIndividualOperatorInput {
  acceptedSpecieOptionsIds: [ID]
  birthDate: Date
  description: String
  genderOptionId: String
  hostingOptionId: String
  languageOptionIds: [ID]
  mainMediaId: ID
  ownAnimalsSpecieOptionsIds: [ID]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: ID
}

"""The result of the updateIndividualOperator mutation"""
union UpdateIndividualOperatorResult = IndividualOperator | InvalidArgumentsError | NotFoundError | UnableToProcessError

input UpdateLanguageOptionInput {
  mediaId: ID
  nameEn: String
  nameFr: String
}

union UpdateLanguageOptionResult = InvalidArgumentsError | LanguageOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateServiceOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateServiceOptionResult = InvalidArgumentsError | ServiceOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateSpecieOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateSpecieOptionResult = InvalidArgumentsError | SpecieOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type User implements Actor & Node {
  accountId: ID
  createdAt: DateTime
  firstName: String!

  """GUID for a resource"""
  id: String!
  lastName: String
  updatedAt: DateTime
}

type UserAuthenticationError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserBookingMessage implements BookingMessage & Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
  user: User
  userId: ID
}

"""The result of the userById query"""
union UserByIdResult = InvalidArgumentsError | NotFoundError | User | UserAuthenticationError | UserForbiddenError

type UserClaim implements Claim & Node {
  bookingId: ID!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  reason: String!
  updatedAt: DateTime
  user: User
  userId: ID
}

type UserForbiddenError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
  user: User
  userId: ID
}

"""List of users"""
type UsersList {
  users: [User]
}

input VerifyUserInput {
  token: JWT!
}

"""The result of the verifyUser mutation"""
union VerifyUserResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError
