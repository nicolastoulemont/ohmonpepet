### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account implements Node {
  createdAt: DateTime
  email: EmailAddress

  """GUID for a resource"""
  id: String!
  operator: IndividualOperator
  staff: Staff
  updatedAt: DateTime
  user: User
  verifiedAt: DateTime
}

"""The result of the accountById query"""
union AccountByIdResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""Return an account or account related errors"""
union AccountResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""List of accounts"""
type AccountsList {
  accounts: [Account]
}

"""Represent the minimal fields required for any actors"""
interface Actor implements Node {
  accountId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
}

union AdByIdResult = BookingAd | InvalidArgumentsError | NotFoundError

"""The result of the accounts query"""
union AllAccountsResult = AccountsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

union AllOperatorsResult = Operators | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the allStaffs query"""
union AllStaffsResult = StaffsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the allUsers query"""
union AllUsersResult = UnableToProcessError | UserAuthenticationError | UserForbiddenError | UsersList

union AuthorizePaymentResult = AuthorizedPayment | InvalidOperatorError | NotFoundError | OperatorCannotProcessPaymentsError | UnableToProcessError | UserAuthenticationError

type AuthorizedPayment {
  clientSecret: String
  hadRef: Boolean
  stripeTargetApi: String
}

union BidForBookingAdResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type Booking implements Node {
  animals: [BookingAnimal]
  animalsIds: [ID]
  applicationFeeAmount: PositiveFloat
  canceled: Boolean
  canceledBy: String
  canceledReason: String
  claims: [Claim]
  createdAt: DateTime
  endDate: Date

  """GUID for a resource"""
  id: String!
  messages: [BookingMessage]
  operator: IndividualOperator
  operatorConfirmationDate: DateTime
  ownerConfirmationDate: DateTime
  paid: Boolean
  payment: StripePayment
  priceWithOutApplicationFee: PositiveFloat
  reviews: [Review]
  selectedOptions: JSON
  service: ServiceOption
  startDate: Date
  status: BookingStatus
  underReview: Boolean
  updatedAt: DateTime
  user: User
}

type BookingAd implements Node {
  animals: [SpecieOption]
  animalsSpeciesIds: [String!]!
  bidders: [IndividualOperator]
  createdAt: DateTime
  description: String
  endDate: Date

  """GUID for a resource"""
  id: String!
  location: Location
  service: ServiceOption
  serviceMaxPrice: Float
  serviceOptionId: String!
  startDate: Date
  updatedAt: DateTime
  user: User
}

type BookingAdBid implements Node {
  bookingAd: BookingAd
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  operator: Operator
  updatedAt: DateTime
}

type BookingAdBids {
  bids: [BookingAdBid]
}

type BookingAds {
  bookingAds: [BookingAd]
}

type BookingAnimal implements Node {
  bookingId: ID!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  specie: SpecieOption
  specieOptionId: ID!
  updatedAt: DateTime
}

union BookingByIdResult = Booking | InvalidArgumentsError | NotFoundError

interface BookingMessage implements Message & Node {
  booking: Booking
  bookingId: ID!
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
}

"""The result of the bookingMessageById query"""
union BookingMessageByIdResult = InvalidArgumentsError | NotFoundError | OperatorBookingMessage | UserAuthenticationError | UserBookingMessage | UserForbiddenError

union BookingMessageSubscriptionResult = OperatorBookingMessage | UserAuthenticationError | UserBookingMessage | UserForbiddenError

union BookingPayment = StripePayment

"""The booking different possible status"""
enum BookingStatus {
  BOTH_CONFIRMED
  CANCELED
  NONE_CONFIRMED
  PAID
  PAYMENT_AUTHORIZED
  PENDING_OWNER_VALIDATION
  PENDING_SITTER_VALIDATION
  UNDER_REVIEW
}

union BookingSubscriptionResult = Booking | UserAuthenticationError | UserForbiddenError

input BookingWithPaymentStatusInput {
  paymentStatus: String
  underReview: Boolean
}

union BookingWithPaymentStatusResult = BookingsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""List of bookings"""
type BookingsList {
  bookings: [Booking]
}

union BookingsResult = BookingsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type BooleanResult {
  success: Boolean
}

input CancelBookingInput {
  canceledReason: String
  id: ID!
  source: SourceValue!
}

union CancelBookingResult = Booking | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

input CancelOnGoingBookingInput {
  canceledReason: String!
  id: ID!
  source: SourceValue!
}

union CancelOnGoingBookingResult = Booking | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

type CannotBookHimSelfError {
  cannotBookHimSelfError: String
}

type ChargesNotEnabledProcessorAccountError {
  chargesNotEnabledProcessorAccountError: String
}

type Claim implements Node {
  booking: Booking
  bookingId: ID!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  operator: IndividualOperator
  reason: String!
  updatedAt: DateTime
  user: User
}

union ClaimByIdResult = Claim | NotFoundError | UserAuthenticationError | UserForbiddenError

"""List of booking messages"""
type ClaimsList {
  claims: [Claim]
}

"""The result of the bookingMessages query"""
union ClaimsResult = ClaimsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input ConfirmBookingInput {
  id: ID!
  source: SourceValue!
}

union ConfirmBookingResult = Booking | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

type ConnectOperatorToProccessorResult {
  redirectUrl: String
}

input CreateAccountInput {
  email: EmailAddress!
  firstName: String!
  originUrl: String
  password: String!
}

"""The result of the createAccount mutation"""
union CreateAccountResult = Account | InvalidArgumentsError | UnableToProcessError

input CreateBookingAdInput {
  animalsSpeciesIds: [String!]!
  description: String
  endDate: String!
  latitude: Latitude!
  longitude: Longitude!
  serviceMaxPrice: Float
  serviceOptionId: String!
  startDate: String!
}

union CreateBookingAdResult = BookingAd | InvalidArgumentsError | PreExistingUserAdError | UnableToProcessError | UserAuthenticationError

input CreateBookingClaimInput {
  bookingId: String!
  operatorId: ID!
  reason: String!
  userId: ID!
}

union CreateBookingClaimResult = Claim | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

input CreateBookingInput {
  animalsIds: [String!]!
  endDate: String!
  message: String
  operatorId: ID!
  selectedOptions: [JSON]
  serviceOptionId: ID!
  startDate: String!
}

union CreateBookingResult = Booking | CannotBookHimSelfError | ExistingBookingError | InvalidArgumentsError | NotFoundError | NotSupportedExtraServiceError | UnableToProcessError | UserAuthenticationError

input CreateDonationReceiptInput {
  amountDonated: Float!
  donationsIds: [ID]!
  filesUrls: [URL]!
  partnerId: ID!
}

union CreateDonationReceiptResult = DonationReceipt | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateGenderOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateGenderOptionResult = GenderOption | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateHostingOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateHostingOptionResult = HostingOption | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateIndividualOperatorInput {
  acceptedSpecieOptionsIds: [ID!]!
  avatarMediaId: ID
  birthDate: Date
  description: String
  genderOptionId: String
  hostingOptionId: String
  languageOptionIds: [ID!]!
  ownAnimalsSpecieOptionsIds: [ID!]!
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: ID
}

"""The result of the createIndividualOperator mutation"""
union CreateIndividualOperatorResult = IndividualOperator | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

input CreateInvidualOperatorCoreServicesInput {
  price: Int!
  serviceOptionId: ID!
}

union CreateInvidualOperatorCoreServicesResult = BooleanResult | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

union CreateInvidualOperatorExtraServicesResult = BooleanResult | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

input CreateLanguageOptionInput {
  mediaId: String!
  nameEn: String!
  nameFr: String!
}

union CreateLanguageOptionResult = InvalidArgumentsError | LanguageOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateMediaInput {
  fileName: String!
  fileType: String!
  saveAs: String!
}

union CreateMediaResult = InvalidArgumentsError | StorageInfos | UnableToProcessError | UserAuthenticationError

input CreateMessageInput {
  bookingId: String!
  content: String!
  saveAs: SaveAsValue!
}

union CreateMessageResult = InvalidArgumentsError | OperatorBookingMessage | StaffBookingMessage | UnableToProcessError | UserAuthenticationError | UserBookingMessage

input CreateOperatorAvailabilityInput {
  dates: [Date!]!
}

union CreateOperatorAvailabilityResult = BooleanResult | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

input CreatePartnerInput {
  description: String!
  name: String!
  storeUrls: [String!]!
  websiteUrl: String!
}

union CreatePartnerResult = InvalidArgumentsError | Partner | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateReviewInput {
  body: String
  bookingId: String!
  saveAs: String!
  score: PositiveFloat!
  title: String!
}

union CreateReviewResult = InvalidArgumentsError | OperatorReview | UnableToProcessError | UserAuthenticationError | UserReview

input CreateServiceOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateServiceOptionResult = InvalidArgumentsError | ServiceOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateSpecieOptionInput {
  nameEn: String!
  nameFr: String!
}

union CreateSpecieOptionResult = InvalidArgumentsError | SpecieOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input CreateStaffAccountInput {
  email: EmailAddress!
  password: String!
  phoneNumber: String!
}

"""The result of the createStaffAccount mutation"""
union CreateStaffAccountResult = Account | InvalidArgumentsError | UnableToProcessError

type CronStatus {
  status: String
}

union CronSubscriptionsResult = BooleanResult | UserAuthenticationError | UserForbiddenError

"""The result of the currentAccount query"""
union CurrentAccountResult = Account | NotFoundError | UserAuthenticationError

union CurrentOperatorDonationsResult = DonationsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the currentOperatorMedia query"""
union CurrentOperatorMediaResult = NotFoundError | OperatorMedia | SharedMedia | UserAuthenticationError | UserForbiddenError

union CurrentOperatorResult = IndividualOperator | NotFoundError | UserAuthenticationError | UserForbiddenError

union CurrentStaffResult = NotFoundError | Staff | UserAuthenticationError | UserForbiddenError

union CurrentUserAdsResult = BookingAds | UnableToProcessError

union CurrentUserAndOperatorBookingsResult = BookingsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

union CurrentUserBidsResult = BookingAdBids | UnableToProcessError

input CurrentUserBookingFilterInput {
  endDate: Date
  includeFinished: Boolean
  serviceOptionId: ID
  sortKey: String
  sortValue: String
  startDate: Date
}

union CurrentUserBookingsResult = BookingsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the currentUserMedia query"""
union CurrentUserMediaResult = NotFoundError | SharedMedia | UserAuthenticationError | UserForbiddenError | UserMedia

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The result of the deleteAccount mutation"""
union DeleteAccountResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteBookingAdResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the deleteClaim mutation"""
union DeleteClaimResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteDonationReceiptResult = BooleanResult | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

union DeleteGenderOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

union DeleteHostingOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

union DeleteInvidualOperatorCoreServicesResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteInvidualOperatorExtraServicesResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteLanguageOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""The result of the deleteMedia mutation"""
union DeleteMediaResult = BooleanResult | InvalidArgumentsError | IsActiveOperatorMainMediaError | IsActiveOperatorWithNoReplacementMediaError | NotFoundError | UnableToProcessError | UserAuthenticationError

"""The result of the deleteMessage mutation"""
union DeleteMessageResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteOperatorAvailabilityResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeletePartnerResult = BooleanResult | UserAuthenticationError | UserForbiddenError

"""The result of the deleteReview mutation"""
union DeleteReviewResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

union DeleteServiceOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

union DeleteSpecieOptionResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

type DetailsNotSubmittedProcessorAccountError {
  detailsNotSubmittedProcessorAccountError: String
}

type Donation implements Node {
  amountToDonate: PositiveFloat
  booking: Booking
  createdAt: DateTime
  donationDate: DateTime

  """GUID for a resource"""
  id: String!
  operator: IndividualOperator
  partner: Partner
  partnerId: ID!
  updatedAt: DateTime
}

union DonationByIdResult = Donation | InvalidArgumentsError | NotFoundError

type DonationReceipt implements Node {
  amountDonated: PositiveFloat
  createdAt: DateTime
  donations: [Donation]
  files: [Media]

  """GUID for a resource"""
  id: String!
  partner: Partner
  updatedAt: DateTime
}

union DonationReceiptByIdResult = DonationReceipt | InvalidArgumentsError | NotFoundError

type DonationReceiptMedia implements Media & Node {
  createdAt: DateTime
  donationReceipt: DonationReceipt
  donationReceiptId: ID

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
}

"""List of DonationReceipts"""
type DonationReceiptsList {
  donationReceipts: [DonationReceipt]
}

"""The result of the gendersOptions query"""
union DonationReceiptsResult = DonationReceiptsList | UnableToProcessError

"""List of donations"""
type DonationsList {
  donations: [Donation]
}

"""The result of the donations query"""
union DonationsResult = DonationsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailAndPasswordInput {
  email: EmailAddress!
  password: String!
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type ExistingBookingError {
  existingBookingError: String
}

type GenderOption implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the genderOptionById query"""
union GenderOptionByIdResult = GenderOption | InvalidArgumentsError | NotFoundError

"""List of genderOptions"""
type GenderOptionsList {
  genderOptions: [GenderOption]
}

"""The result of the gendersOptions query"""
union GenderOptionsResult = GenderOptionsList | UnableToProcessError

union GetCronStatusResult = CronStatus | UserAuthenticationError | UserForbiddenError

type HostingOption implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the hostingOptionById query"""
union HostingOptionByIdResult = Account | InvalidArgumentsError | NotFoundError

"""List of HostingOptions"""
type HostingOptionsList {
  hostingOptions: [HostingOption]
}

"""The result of the hostingsOptions query"""
union HostingOptionsResult = HostingOptionsList | UnableToProcessError

type IndividualOperator implements Actor & Node & Operator {
  acceptedSpecieOptionsIds: [String]
  account: Account
  accountId: ID
  availabilities: [OperatorAvailability]
  avatar: Media
  avatarMediaId: String
  averageResponseTime: DateTime
  averageScore: Float
  bids: [BookingAdBid]
  birthDate: Date
  calendarUpdate: DateTime
  coreServices: [IndividualOperatorCoreService]
  createdAt: DateTime
  description: String
  donations: [Donation]
  extraServices: IndividualOperatorExtraService
  gender: GenderOption
  genderOptionId: ID
  hosting: HostingOption
  hostingOptionId: String

  """GUID for a resource"""
  id: String!
  isActive: Boolean
  languageOptionIds: [String]
  location: Location
  medias: [Media]
  ownAnimalsSpecieOptionsIds: [String]
  partner: Partner
  partnerId: String
  partnerPercentage: Int
  reviews: [Review]
  stripeAccountId: String
  updatedAt: DateTime
}

type IndividualOperatorCoreService implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  operator: IndividualOperator
  price: Int!
  service: ServiceOption
  serviceOptionId: ID!
  updatedAt: DateTime
}

type IndividualOperatorExtraService implements Node {
  abilityToProvideMedicalCare: Boolean
  acceptShortNotice: Boolean
  atHomeComeGetPet: Boolean
  atHomeComeGetPetExtraPrice: Int
  atHomeContinuously: Boolean
  atHomeContinuouslyExtraPrice: Int
  atHomeExclusivity: Boolean
  atHomeExclusivityExtraPrice: Int
  atHomeOnlyBringPet: Boolean
  atHomeOnlyBringPetExtraPrice: Int
  atOwnerHomeCurtains: Boolean
  atOwnerHomeCurtainsExtraPrice: Int
  atOwnerHomeMail: Boolean
  atOwnerHomeMailExtraPrice: Int
  atOwnerHomePlantsCare: Boolean
  atOwnerHomePlantsCareExtraPrice: Int
  createdAt: DateTime
  flexibleCancelation: Boolean

  """GUID for a resource"""
  id: String!
  isProfessionalOperator: Boolean
  operator: IndividualOperator
  updatedAt: DateTime
}

type InvalidArgument {
  key: String!
  message: String!
}

type InvalidArgumentsError {
  code: ErrorCode!
  invalidArguments: [InvalidArgument]!
  message: ErrorMessage!
}

type InvalidOperatorError {
  invalidOperatorError: String
}

input InvidualOperatorExtraServicesInput {
  abilityToProvideMedicalCare: Boolean
  acceptShortNotice: Boolean
  atHomeComeGetPet: Boolean
  atHomeComeGetPetExtraPrice: Int
  atHomeContinuously: Boolean
  atHomeContinuouslyExtraPrice: Int
  atHomeExclusivity: Boolean
  atHomeExclusivityExtraPrice: Int
  atHomeOnlyBringPet: Boolean
  atHomeOnlyBringPetExtraPrice: Int
  atOwnerHomeCurtains: Boolean
  atOwnerHomeCurtainsExtraPrice: Int
  atOwnerHomeMail: Boolean
  atOwnerHomeMailExtraPrice: Int
  atOwnerHomePlantsCare: Boolean
  atOwnerHomePlantsCareExtraPrice: Int
  flexibleCancelation: Boolean
  isProfessionalOperator: Boolean
}

type IsActiveOperatorMainMediaError {
  activeOperatorMainMediaError: String!
}

type IsActiveOperatorWithNoReplacementMediaError {
  activeOperatorWithNoReplacementMediaError: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type LanguageOption implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  media: Media
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the languageOptionById query"""
union LanguageOptionByIdResult = InvalidArgumentsError | LanguageOption | NotFoundError

type LanguageOptionMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  language: LanguageOption
  languageOptionId: ID
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
}

"""List of languageOptions"""
type LanguageOptionsList {
  languageOptions: [LanguageOption]
}

"""The result of the languagesOptions query"""
union LanguageOptionsResult = LanguageOptionsList | UnableToProcessError

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

type Location implements Node {
  address: String
  bookingAd: BookingAd
  city: String
  country: String
  country_code: String
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  latitude: Latitude!
  longitude: Longitude!
  operator: Operator
  postcode: String
  updatedAt: DateTime
}

type LocationSearchInfos {
  city: String
  country: String
  country_code: String
  formattedLocationString: String
  id: String
  latitude: Latitude
  locale_names: String
  longitude: Longitude
  postcode: String
}

union LocationSearchResult = InvalidArgumentsError | LocationsList | UnableToProcessError

type LocationsList {
  locations: [LocationSearchInfos]
}

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

"""The result of the lostPassword mutation"""
union LostPasswordResult = BooleanResult | NotFoundError

"""The minimum required fields for media types"""
interface Media implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
}

"""The result of the mediaById query"""
union MediaByIdResult = InvalidArgumentsError | NotFoundError | OperatorMedia | SharedMedia | UserAuthenticationError | UserForbiddenError | UserMedia

"""Type of media accepted"""
enum MediaType {
  IMAGE
  VIDEO
}

"""List of medias"""
type MediasList {
  medias: [Media]
}

"""The result of the medias query"""
union MediasResult = MediasList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The minimum required fields for message types"""
interface Message implements Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
}

type MessageMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  message: Message
  messageId: ID
  storeUrl: URL!
  updatedAt: DateTime
}

"""The result of the bookingMessages query"""
union MessagesByBookingIdResult = InvalidArgumentsError | MessagesList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""List of booking messages"""
type MessagesList {
  messages: [Message]
}

"""The result of the bookingMessages query"""
union MessagesResult = MessagesList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type MissingProcessorAccountError {
  missingProcessorAccountError: String
}

"""The result of the modifyEmail mutation"""
union ModifyEmailResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

"""The result of the modifyPassword mutation"""
union ModifyPasswordResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

type Mutation {
  authorizePayment(id: ID!): AuthorizePaymentResult
  bidForBookingAd(id: ID!): BidForBookingAdResult
  cancelBooking(input: CancelBookingInput!): CancelBookingResult
  cancelOnGoingBooking(input: CancelOnGoingBookingInput!): CancelOnGoingBookingResult
  confirmBooking(input: ConfirmBookingInput!): ConfirmBookingResult
  connectUserToProcessor: ConnectOperatorToProccessorResult
  createAccount(input: CreateAccountInput!): CreateAccountResult
  createBooking(input: CreateBookingInput!): CreateBookingResult
  createBookingAd(input: CreateBookingAdInput!): CreateBookingAdResult
  createBookingClaim(input: CreateBookingClaimInput!): CreateBookingClaimResult
  createDonationReceipt(input: CreateDonationReceiptInput!): CreateDonationReceiptResult
  createGenderOption(input: CreateGenderOptionInput!): CreateGenderOptionResult
  createHostingOption(input: CreateHostingOptionInput!): CreateHostingOptionResult
  createIndividualOperator(input: CreateIndividualOperatorInput!): CreateIndividualOperatorResult
  createInvidualOperatorCoreServices(input: CreateInvidualOperatorCoreServicesInput!): CreateInvidualOperatorCoreServicesResult
  createInvidualOperatorExtraServices(input: InvidualOperatorExtraServicesInput!): CreateInvidualOperatorExtraServicesResult
  createLanguageOption(input: CreateLanguageOptionInput!): CreateLanguageOptionResult
  createMedia(input: CreateMediaInput!): CreateMediaResult
  createMessage(input: CreateMessageInput!): CreateMessageResult
  createOperatorAvailability(input: CreateOperatorAvailabilityInput!): CreateOperatorAvailabilityResult
  createPartner(input: CreatePartnerInput!): CreatePartnerResult
  createReview(input: CreateReviewInput!): CreateReviewResult
  createServiceOption(input: CreateServiceOptionInput!): CreateServiceOptionResult
  createSpecieOption(input: CreateSpecieOptionInput!): CreateSpecieOptionResult
  createStaffAccount(input: CreateStaffAccountInput!): CreateStaffAccountResult

  """Access restricted to logged in user"""
  deleteAccount(confirmPassword: String!): DeleteAccountResult
  deleteBookingAd(id: ID!): DeleteBookingAdResult
  deleteClaim(id: ID!): DeleteClaimResult
  deleteCoreIndividualOperatorService(id: ID!): DeleteInvidualOperatorCoreServicesResult
  deleteDonationReceipt(id: ID!): DeleteDonationReceiptResult
  deleteExtraIndividualOperatorService(id: ID!): DeleteInvidualOperatorExtraServicesResult
  deleteGenderOption(id: ID!): DeleteGenderOptionResult
  deleteHostingOption(id: ID!): DeleteHostingOptionResult
  deleteLanguageOption(id: ID!): DeleteLanguageOptionResult
  deleteMedia(id: ID!): DeleteMediaResult
  deleteMessage(id: ID!): DeleteMessageResult
  deleteOperatorAvailability(ids: [ID!]!): DeleteOperatorAvailabilityResult
  deletePartner(id: ID!): DeletePartnerResult
  deleteReview(id: ID!): DeleteReviewResult
  deleteServiceOption(id: ID!): DeleteServiceOptionResult
  deleteSpecieOption(id: ID!): DeleteSpecieOptionResult
  lostPassword(email: String!): LostPasswordResult

  """Access restricted to logged in user"""
  modifyEmail(email: String!): ModifyEmailResult

  """Access restricted to logged in user"""
  modifyPassword(newPassword: String!, password: String!): ModifyPasswordResult
  removeBidForBookingAd(id: ID!): RemoveBidForBookingAdResult
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult
  sendVerificationEmail(email: String!): SendVerificationEmailResult
  setAsRead(input: SetMessagesAsReadInput!): SetMessagesAsReadResult
  setMediaAsAvatar(id: ID!): SetMediaAsAvatarResult
  signIn(input: EmailAndPasswordInput!): SignInResult

  """Access restricted to logged in user"""
  signOut: SignOutResult
  startCron(cronName: String!): StartCronResult
  stopCron(cronName: String!): StopCronResult
  updateBookingAd(id: ID!, input: UpdateBookingAdInput!): UpdateBookingAdResult
  updateBookingPaymentStatus(input: UpdateBookingPaymentStatusInput!): UpdateBookingPaymentStatusResult
  updateDonationReceipt(input: UpdateDonationReceiptInput!): UpdateDonationReceiptResult
  updateGenderOption(id: ID!, input: UpdateGenderOptionInput!): UpdateGenderOptionResult
  updateHostingOption(id: ID!, input: UpdateHostingOptionInput!): UpdateHostingOptionResult
  updateIndividualOperator(input: UpdateIndividualOperatorInput!): UpdateIndividualOperatorResult
  updateInvidualOperatorCoreServices(input: UpdateInvidualOperatorCoreServicesInput!): UpdateInvidualOperatorCoreServicesResult
  updateInvidualOperatorExtraServices(id: ID!, input: InvidualOperatorExtraServicesInput!): UpdateInvidualOperatorExtraServicesResult
  updateLanguageOption(id: ID!, input: UpdateLanguageOptionInput!): UpdateLanguageOptionResult
  updateMessage(id: ID!, input: UpdateMessageInput!): UpdateMessageResult
  updatePartner(id: ID!, input: UpdatePartnerInput!): UpdatePartnerResult
  updateReview(id: ID!, input: UpdateReviewInput!, saveAs: String!): UpdateReviewResult
  updateServiceOption(id: ID!, input: UpdateServiceOptionInput!): UpdateServiceOptionResult
  updateSpecieOption(id: ID!, input: UpdateSpecieOptionInput!): UpdateSpecieOptionResult
  verifyUser(input: VerifyUserInput!): VerifyUserResult
  verifyUserProcessorConnectionCompletion: VerifyUserProcessorConnectionCompletionResult
}

interface Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
}

type NotFoundError {
  code: ErrorCode!
  message: ErrorMessage!
}

type NotSupportedExtraServiceError {
  notSupportedExtraServiceError: String
}

"""
Represent the required fields of commercial operators on the plateform.
"""
interface Operator implements Actor & Node {
  acceptedSpecieOptionsIds: [String]
  accountId: ID
  avatarMediaId: String
  calendarUpdate: DateTime
  createdAt: DateTime
  description: String
  hostingOptionId: String

  """GUID for a resource"""
  id: String!
  isActive: Boolean
  languageOptionIds: [String]
  ownAnimalsSpecieOptionsIds: [String]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: String
  updatedAt: DateTime
}

type OperatorAvailability implements Node {
  createdAt: DateTime
  date: Date

  """GUID for a resource"""
  id: String!
  operator: IndividualOperator
  updatedAt: DateTime
}

type OperatorBookingMessage implements BookingMessage & Message & Node {
  booking: Booking
  bookingId: ID!
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  operator: IndividualOperator
  operatorId: ID!
  readAt: DateTime
  updatedAt: DateTime
}

union OperatorByIdResult = IndividualOperator | NotFoundError

type OperatorCannotProcessPaymentsError {
  operatorCannotProcessPaymentsError: String
}

type OperatorMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  operator: Operator
  operatorId: ID
  storeUrl: URL!
  updatedAt: DateTime
}

type OperatorReview implements Node & Review {
  body: String
  booking: Booking
  bookingId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  operator: Operator
  operatorId: ID
  score: Float!
  title: String!
  updatedAt: DateTime
}

type Operators {
  operators: [IndividualOperator]
}

type Partner implements Node {
  createdAt: DateTime
  creator: Staff
  description: String!
  donations: [Donation]

  """GUID for a resource"""
  id: String!

  """Contains the partner logo"""
  medias: [Media]
  name: String!
  receipts: [DonationReceipt]
  updatedAt: DateTime
  websiteUrl: String!
}

union PartnerByIdResult = NotFoundError | Partner

type PartnerMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  partner: Partner
  partnerId: ID
  storeUrl: URL!
  updatedAt: DateTime
}

"""List of partners"""
type PartnersList {
  partners: [Partner]
}

"""The result of the partners query"""
union PartnersResult = PartnersList | UnableToProcessError

interface Payment implements Node {
  bookingId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  status: PaymentStatus!
  updatedAt: DateTime
}

type PaymentProcessorError {
  paymentProcessorError: String
}

"""All possible payment status"""
enum PaymentStatus {
  AUTHORIZED_BUT_CANCELLED
  AUTHORIZED_REQUIRE_CAPTURE
  CAPTURED_AND_PAID
  ERROR_SENDING_AUTH_REQUIRED_MAIL
  ERROR_SENDING_INSUFFICIENT_FUNDS_MAIL
  ERROR_SENDING_UNKOWN_ERROR_MAIL
  FAILED_CAPTURE
  FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED
  FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED_MAIL_SENT
  FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS
  FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS_MAIL_SENT
  FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR
  FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR_MAIL_SENT
  PENDING_AUTHORIZATION
  SETUP_INTENT_CONFIRMED_REQUIRED_PAYMENT_INTENT_CREATION
  SETUP_INTENT_PENDING_CONFIRMATION
}

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

type PreExistingOperatorBidError {
  preExistingOperatorBidError: String
}

type PreExistingUserAdError {
  preExistingUserAdError: String
}

type Query {
  """Access restricted to admin users"""
  accountById(id: ID!): AccountByIdResult
  adById(id: ID!): AdByIdResult

  """Access restricted to admin users"""
  allAccounts: AllAccountsResult
  allOperators: AllOperatorsResult

  """Access restricted to Staff Staffs"""
  allStaffs: AllStaffsResult

  """Access restricted to admin users"""
  allUsers: AllUsersResult
  bookingById(id: ID!): BookingByIdResult

  """Access restricted to admin users"""
  bookingMessageById(id: ID!): BookingMessageByIdResult
  bookings: BookingsResult
  bookingsWithPaymentStatus(input: BookingWithPaymentStatusInput!): BookingWithPaymentStatusResult
  claimById(id: ID!): ClaimByIdResult

  """Access restricted to admin users"""
  claims: ClaimsResult

  """Access restricted to logged in user"""
  currentAccount: CurrentAccountResult
  currentOperator: CurrentOperatorResult
  currentOperatorBids: CurrentUserBidsResult
  currentOperatorDonations: CurrentOperatorDonationsResult

  """Access restricted to logged in user"""
  currentOperatorMedia: CurrentOperatorMediaResult
  currentStaff: CurrentStaffResult
  currentUserAds: CurrentUserAdsResult
  currentUserAndOperatorBookings: CurrentUserAndOperatorBookingsResult

  """Access restricted to logged in user"""
  currentUserMedia: CurrentUserMediaResult
  currentUserOperatorBookings(input: CurrentUserBookingFilterInput!): CurrentUserBookingsResult
  currentUserOwnerBookings(input: CurrentUserBookingFilterInput!): CurrentUserBookingsResult
  donationById(id: ID!): DonationByIdResult
  donationReceipts: DonationReceiptsResult
  donations: DonationsResult
  genderOptionById(id: ID!): GenderOptionByIdResult
  gendersOptions: GenderOptionsResult
  getCronStatus(cronName: String!): GetCronStatusResult
  hostingOptionById(id: ID!): HostingOptionByIdResult
  hostingsOptions: HostingOptionsResult
  languageOptionById(id: ID!): LanguageOptionByIdResult
  languagesOptions: LanguageOptionsResult
  locationSearch(locale: String!, query: String!): LocationSearchResult

  """Access restricted to admin users"""
  mediaById(id: ID!): MediaByIdResult

  """Access restricted to admin users"""
  medias: MediasResult

  """Access restricted to admin users"""
  messages: MessagesResult
  messagesByBookingId(id: ID!): MessagesByBookingIdResult
  operatorById(id: ID!): OperatorByIdResult
  partnerById(id: ID!): PartnerByIdResult
  partners: PartnersResult
  receiptById(id: ID!): DonationReceiptByIdResult

  """Access restricted to admin users"""
  reviewById(id: ID!): ReviewByIdResult

  """Access restricted to admin users"""
  reviews: ReviewsResult
  searchAds(input: SearchAdsInput!): SearchAdsResult
  searchDonationReceipts(input: SearchDonationReceiptsInput!): SearchDonationReceiptsResult
  searchDonations(input: SearchDonationsInput!): SearchDonationsResult
  searchOperators(input: SearchOperatorsInput!): SearchOperatorsResult
  searchPartners(input: SearchPartnersInput!): SearchPartnersResult

  """Access restricted to admin users"""
  serviceOptionById(id: ID!): ServiceOptionByIdResult
  servicesOptions: ServiceOptionsResult

  """Access restricted to admin users"""
  specieOptionById(id: ID!): SpecieOptionByIdResult
  speciesOptions: SpecieOptionsResult

  """Access restricted to Staff Staffs"""
  staffById(id: ID!): StaffByIdResult

  """Access restricted to admin users"""
  userById(id: ID!): UserByIdResult
}

union RemoveBidForBookingAdResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input ResetPasswordInput {
  newPassword: String!
  token: JWT!
}

"""The result of the resetPassword mutation"""
union ResetPasswordResult = BooleanResult | InvalidArgumentsError | UnableToProcessError

interface Review implements Node {
  body: String
  booking: Booking
  bookingId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  score: Float!
  title: String!
  updatedAt: DateTime
}

"""The result of the reviewById query"""
union ReviewByIdResult = InvalidArgumentsError | NotFoundError | OperatorReview | UserAuthenticationError | UserForbiddenError | UserReview

"""List of reviews"""
type ReviewsList {
  reviews: [Review]
}

"""The result of the reviews query"""
union ReviewsResult = ReviewsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""A field whose value must be either: user, operator, staff"""
scalar SaveAsValue

input SearchAdsInput {
  acceptedAnimalsIds: [ID!]!
  latitude: Latitude!
  longitude: Longitude!
  maxDistanceInKms: Float = 10
  serviceOptionIds: [String!]
}

union SearchAdsResult = BookingAds | UnableToProcessError

input SearchDonationReceiptsInput {
  endDate: Date
  partnerId: String
  startDate: Date
}

union SearchDonationReceiptsResult = DonationReceiptsList | InvalidArgumentsError | UnableToProcessError

input SearchDonationsInput {
  donated: Boolean
  endDate: Date
  partnerId: String
  startDate: Date
}

union SearchDonationsResult = DonationsList | InvalidArgumentsError | UnableToProcessError

input SearchOperatorsInput {
  abilityToProvideMedicalCare: Boolean
  acceptShortNotice: Boolean
  acceptedSpecieOptionsIds: [ID!]
  atHomeComeGetPet: Boolean
  atHomeContinuously: Boolean
  atHomeExclusivity: Boolean
  atHomeOnlyBringPet: Boolean
  atOwnerHomeCurtains: Boolean
  atOwnerHomeMail: Boolean
  atOwnerHomePlantsCare: Boolean
  endDate: Date!
  flexibleCancelation: Boolean
  genderOptionId: [String!]
  hostingOptionId: [String!]
  isProfessionalOperator: Boolean
  languageOptionIds: [ID!]
  latitude: Latitude!
  longitude: Longitude!
  maxDistanceInKms: Float = 10
  ownAnimalsSpecieOptionsIds: [ID!]
  score: Float
  serviceMaxPrice: Float
  serviceOptionId: String
  startDate: Date!
}

union SearchOperatorsResult = Operators | UnableToProcessError

input SearchPartnersInput {
  query: String!
}

union SearchPartnersResult = PartnersList | UnableToProcessError

"""The result of the sendVerificationEmail mutation"""
union SendVerificationEmailResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError

type ServiceOption implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the serviceOptionById query"""
union ServiceOptionByIdResult = InvalidArgumentsError | NotFoundError | ServiceOption | UserAuthenticationError | UserForbiddenError

"""List of serviceOptions"""
type ServiceOptionsList {
  serviceOptions: [ServiceOption]
}

"""The result of the servicesOptions query"""
union ServiceOptionsResult = ServiceOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

union SetMediaAsAvatarResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input SetMessagesAsReadInput {
  ids: [ID!]!
  readAt: Date
}

"""The result of the setMessageAsRead mutation"""
union SetMessagesAsReadResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

type SharedMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  operator: Operator
  operatorId: ID
  storeUrl: URL!
  updatedAt: DateTime
  user: User
  userId: ID
}

"""The result of the signIn mutation"""
union SignInResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signOut mutation"""
union SignOutResult = BooleanResult | UnableToProcessError | UserAuthenticationError

"""A field whose value must be either: USER, OPERATOR"""
scalar SourceValue

type SpecieOption implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  nameEn: String!
  nameFr: String!
  updatedAt: DateTime
}

"""The result of the specieOptionById query"""
union SpecieOptionByIdResult = InvalidArgumentsError | NotFoundError | SpecieOption | UserAuthenticationError | UserForbiddenError

"""List of specieOptions"""
type SpecieOptionsList {
  specieOptions: [SpecieOption]
}

"""The result of the speciesOptions query"""
union SpecieOptionsResult = SpecieOptionsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type Staff implements Node {
  createdAt: DateTime
  email: String

  """GUID for a resource"""
  id: String!
  phoneNumber: String
  updatedAt: DateTime
}

type StaffBookingMessage implements BookingMessage & Message & Node {
  booking: Booking
  bookingId: ID!
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  staff: Staff
  staffId: ID!
  updatedAt: DateTime
}

"""The result of the StaffById query"""
union StaffByIdResult = InvalidArgumentsError | NotFoundError | Staff | UserAuthenticationError | UserForbiddenError

"""List of Staffs"""
type StaffsList {
  staffs: [Staff]
}

union StartCronResult = BooleanResult | UserAuthenticationError | UserForbiddenError

union StopCronResult = BooleanResult | UserAuthenticationError | UserForbiddenError

type StorageInfos {
  mediaId: ID!
  signedRequest: String
  url: String
}

type StripePayment implements Node & Payment {
  booking: Booking
  bookingId: ID
  createdAt: DateTime
  errorCode: String
  expectedPaymentIntentCaptureDate: DateTime

  """GUID for a resource"""
  id: String!
  status: PaymentStatus!
  updatedAt: DateTime
}

type Subscription {
  bookingByIdChatSub(bookingId: ID!): BookingMessageSubscriptionResult
  errorsEmailCronSub: CronSubscriptionsResult
  newlyCreatedBookingsAsSitterSub(sitterId: ID): BookingSubscriptionResult
  pendingPaymentCronSub: CronSubscriptionsResult
  setupIntentCronSub: CronSubscriptionsResult
  userBookingsMessagesChangesSub(authorId: ID, bookingIds: [ID]): BookingMessageSubscriptionResult
  userBookingsStatusChangesSub(bookingIds: [ID]): BookingSubscriptionResult
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type UnableToProcessError {
  code: ErrorCode!
  message: ErrorMessage!
}

input UpdateBookingAdInput {
  animalsSpeciesIds: [String!]!
  description: String
  endDate: String!
  latitude: Latitude!
  longitude: Longitude!
  serviceMaxPrice: Float
  serviceOptionId: String!
  startDate: String!
}

union UpdateBookingAdResult = BookingAd | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

input UpdateBookingPaymentStatusInput {
  id: ID!
  paymentMethodId: String
}

union UpdateBookingPaymentStatusResult = BooleanResult | InvalidArgumentsError | NotFoundError | PaymentProcessorError | UnableToProcessError | UserAuthenticationError

input UpdateDonationReceiptInput {
  amountDonated: Float!
  donationsIds: [ID]!
  filesUrls: [URL]!
  id: ID!
  partnerId: ID!
}

union UpdateDonationReceiptResult = DonationReceipt | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateGenderOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateGenderOptionResult = GenderOption | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateHostingOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateHostingOptionResult = HostingOption | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateIndividualOperatorInput {
  acceptedSpecieOptionsIds: [ID!]!
  avatarMediaId: ID
  birthDate: Date
  description: String
  genderOptionId: String
  hostingOptionId: String
  languageOptionIds: [ID!]!
  ownAnimalsSpecieOptionsIds: [ID!]!
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: ID
}

"""The result of the updateIndividualOperator mutation"""
union UpdateIndividualOperatorResult = IndividualOperator | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateInvidualOperatorCoreServicesInput {
  coreOperatorServiceId: ID!
  price: Int!
  serviceOptionId: ID!
}

union UpdateInvidualOperatorCoreServicesResult = BooleanResult | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

union UpdateInvidualOperatorExtraServicesResult = BooleanResult | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

input UpdateLanguageOptionInput {
  mediaId: ID
  nameEn: String
  nameFr: String
}

union UpdateLanguageOptionResult = InvalidArgumentsError | LanguageOption | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateMessageInput {
  content: String!
  readAt: Date
  saveAs: SaveAsValue
}

union UpdateMessageResult = InvalidArgumentsError | NotFoundError | OperatorBookingMessage | StaffBookingMessage | UnableToProcessError | UserAuthenticationError | UserBookingMessage

input UpdatePartnerInput {
  description: String!
  name: String!
  storeUrls: [String!]!
  websiteUrl: String!
}

union UpdatePartnerResult = InvalidArgumentsError | Partner | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateReviewInput {
  body: String
  score: PositiveFloat!
  title: String!
}

union UpdateReviewResult = InvalidArgumentsError | NotFoundError | OperatorReview | UnableToProcessError | UserAuthenticationError | UserReview

input UpdateServiceOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateServiceOptionResult = InvalidArgumentsError | NotFoundError | ServiceOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

input UpdateSpecieOptionInput {
  nameEn: String
  nameFr: String
}

union UpdateSpecieOptionResult = InvalidArgumentsError | NotFoundError | SpecieOption | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type User implements Actor & Node {
  account: Account
  accountId: ID
  avatar: Media
  avatarMediaId: String
  createdAt: DateTime
  firstName: String!

  """GUID for a resource"""
  id: String!
  lastName: String
  updatedAt: DateTime
}

type UserAuthenticationError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserBookingMessage implements BookingMessage & Message & Node {
  booking: Booking
  bookingId: ID!
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
  user: User
  userId: ID!
}

"""The result of the userById query"""
union UserByIdResult = InvalidArgumentsError | NotFoundError | User | UserAuthenticationError | UserForbiddenError

type UserForbiddenError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
  user: User
  userId: ID
}

type UserReview implements Node & Review {
  body: String
  booking: Booking
  bookingId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  score: Float!
  title: String!
  updatedAt: DateTime
  user: User
  userId: ID
}

"""List of users"""
type UsersList {
  users: [User]
}

input VerifyUserInput {
  token: JWT!
}

union VerifyUserProcessorConnectionCompletionResult = BooleanResult | ChargesNotEnabledProcessorAccountError | DetailsNotSubmittedProcessorAccountError | MissingProcessorAccountError | NotFoundError | UnableToProcessError

"""The result of the verifyUser mutation"""
union VerifyUserResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError
