### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account implements Node {
  createdAt: DateTime
  email: EmailAddress

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
  user: User
  verifiedAt: DateTime
}

"""The result of the accountById query"""
union AccountByIdResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError | UserForbiddenError

"""Return an account or account related errors"""
union AccountResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""List of accounts"""
type AccountsList {
  accounts: [Account]
}

"""Represent the minimal fields required for any actors"""
interface Actor implements Node {
  accountId: ID
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
}

"""The result of the accounts query"""
union AllAccountsResult = AccountsList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the allUsers query"""
union AllUsersResult = UnableToProcessError | UserAuthenticationError | UserForbiddenError | UsersList

"""The minimum required fields for message types"""
interface BookingMessage implements Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
}

type BooleanResult {
  success: Boolean
}

input CreateAccountInput {
  email: EmailAddress!
  firstName: String!
  password: String!
}

"""The result of the createAccount mutation"""
union CreateAccountResult = Account | InvalidArgumentsError | UnableToProcessError

input CreateBookingMessageInput {
  bookingId: String!
  content: String!
  saveAs: String!
}

union CreateBookingMessageResult = InvalidArgumentsError | OperatorBookingMessage | UnableToProcessError | UserAuthenticationError | UserBookingMessage

input CreateIndividualOperatorInput {
  acceptedSpecieOptionsIds: [ID!]!
  birthDate: Date!
  description: String!
  genderOptionId: String!
  hostingOptionId: String!
  languageOptionIds: [ID!]!
  mainMediaId: ID!
  ownAnimalsSpecieOptionsIds: [ID!]!
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: ID
}

"""The result of the createIndividualOperator mutation"""
union CreateIndividualOperatorResult = IndividualOperator | InvalidArgumentsError | UnableToProcessError

input CreateMediaInput {
  fileName: String!
  fileType: String!
  saveAs: String!
}

union CreateMediaResult = InvalidArgumentsError | StorageInfos | UnableToProcessError | UserAuthenticationError

"""The result of the currentAccount query"""
union CurrentAccountResult = Account | NotFoundError | UserAuthenticationError | UserForbiddenError

"""The result of the currentOperatorMedia query"""
union CurrentOperatorMediaResult = NotFoundError | OperatorMedia | SharedMedia | UserAuthenticationError | UserForbiddenError

"""The result of the currentUserMedia query"""
union CurrentUserMediaResult = NotFoundError | SharedMedia | UserAuthenticationError | UserForbiddenError | UserMedia

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The result of the deleteAccount mutation"""
union DeleteAccountResult = BooleanResult | InvalidArgumentsError | NotFoundError | UserAuthenticationError

"""The result of the deleteBookingMessage mutation"""
union DeleteBookingMessageResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

"""The result of the deleteMedia mutation"""
union DeleteMediaResult = BooleanResult | InvalidArgumentsError | IsActiveOperatorMainMediaError | IsActiveOperatorWithNoReplacementMediaError | NotFoundError | UnableToProcessError | UserAuthenticationError

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailAndPasswordInput {
  email: EmailAddress!
  password: String!
}

"""The differents error codes the api will return if needed"""
enum ErrorCode {
  BAD_REQUEST
  FORBIDDEN
  NOT_FOUND
  UNABLE_TO_PROCESS
  UNAUTHORIZED
}

"""The differents error message the api will return if needed"""
enum ErrorMessage {
  FORBIDDEN_YOU_DO_NOT_HAVE_ACCESS_TO_THIS_RESOURCE
  RESOURCE_NOT_FOUND
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_CLIENT_ERROR
  UNABLE_TO_PROCESS_REQUEST_DUE_TO_SERVER_ERROR
  UNAUTHENTICATED_PLEASE_LOGIN
}

type IndividualOperator implements Actor & Node & Operator {
  acceptedSpecieOptionsIds: [String]
  account: Account
  accountId: ID
  birthDate: Date
  calendarUpdate: DateTime
  createdAt: DateTime
  description: String
  genderOptionId: String
  hostingOptionId: String

  """GUID for a resource"""
  id: String!
  languageOptionIds: [String]
  mainMediaId: String
  medias: [Media]
  ownAnimalsSpecieOptionsIds: [String]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: String
  updatedAt: DateTime
}

"""Return an individual operator or related errors"""
union IndividualOperatorResult = IndividualOperator | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError | UserForbiddenError

type InvalidArgument {
  key: String!
  message: String!
}

type InvalidArgumentsError {
  code: ErrorCode!
  invalidArguments: [InvalidArgument]!
  message: ErrorMessage!
}

type IsActiveOperatorMainMediaError {
  activeOperatorMainMediaError: String!
}

type IsActiveOperatorWithNoReplacementMediaError {
  activeOperatorWithNoReplacementMediaError: String!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

"""The result of the lostPassword mutation"""
union LostPasswordResult = BooleanResult | NotFoundError

"""The minimum required fields for media types"""
interface Media implements Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
}

"""The result of the mediaById query"""
union MediaByIdResult = InvalidArgumentsError | NotFoundError | OperatorMedia | SharedMedia | UserAuthenticationError | UserForbiddenError | UserMedia

"""Type of media accepted"""
enum MediaType {
  IMAGE
  VIDEO
}

"""List of medias"""
type MediasList {
  medias: [Media]
}

"""The result of the accounts query"""
union MediasResult = MediasList | UnableToProcessError | UserAuthenticationError | UserForbiddenError

"""The result of the modifyEmail mutation"""
union ModifyEmailResult = Account | InvalidArgumentsError | UnableToProcessError | UserAuthenticationError

"""The result of the modifyPassword mutation"""
union ModifyPasswordResult = Account | InvalidArgumentsError | NotFoundError | UserAuthenticationError

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountResult
  createBookingMessage(input: CreateBookingMessageInput!): CreateBookingMessageResult
  createIndividualOperator(input: CreateIndividualOperatorInput!): CreateIndividualOperatorResult
  createMedia(input: CreateMediaInput!): CreateMediaResult

  """Access restricted to logged in user"""
  deleteAccount(confirmPassword: String!): DeleteAccountResult
  deleteBookingMessage(id: ID!): DeleteBookingMessageResult
  deleteMedia(mediaId: ID!): DeleteMediaResult
  lostPassword(email: String!): LostPasswordResult

  """Access restricted to logged in user"""
  modifyEmail(email: String!): ModifyEmailResult

  """Access restricted to logged in user"""
  modifyPassword(newPassword: String!, password: String!): ModifyPasswordResult
  resetPassword(input: ResetPasswordInput!): ResetPasswordResult
  sendVerificationEmail(email: String!): SendVerificationEmailResult
  setAsRead(input: SetBookingMessagesAsReadInput!): SetBookingMessagesAsReadResult
  signIn(input: EmailAndPasswordInput!): SignInResult

  """Access restricted to logged in user"""
  signOut: SignOutResult
  updateBookingMessage(id: ID!, input: UpdateBookingMessageInput!, saveAs: String!): UpdateBookingMessageResult
  updateIndividualOperator(input: CreateIndividualOperatorInput!): IndividualOperatorResult
  verifyUser(input: VerifyUserInput!): VerifyUserResult
}

interface Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  updatedAt: DateTime
}

type NotFoundError {
  code: ErrorCode!
  message: ErrorMessage!
}

"""
Represent the required fields of commercial operators on the plateform.
"""
interface Operator implements Actor & Node {
  acceptedSpecieOptionsIds: [String]
  accountId: ID
  calendarUpdate: DateTime
  createdAt: DateTime
  description: String
  hostingOptionId: String

  """GUID for a resource"""
  id: String!
  languageOptionIds: [String]
  mainMediaId: String
  ownAnimalsSpecieOptionsIds: [String]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: String
  updatedAt: DateTime
}

type OperatorBookingMessage implements BookingMessage & Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  operator: Operator
  operatorId: ID
  readAt: DateTime
  updatedAt: DateTime
}

type OperatorMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  operator: Operator
  operatorId: ID
  storeUrl: URL!
  updatedAt: DateTime
}

type Query {
  """Access restricted to admin users"""
  accountById(id: ID!): AccountByIdResult

  """Access restricted to admin users"""
  allAccounts: AllAccountsResult

  """Access restricted to admin users"""
  allUsers: AllUsersResult

  """Access restricted to logged in user"""
  currentAccount: CurrentAccountResult

  """Access restricted to logged in user"""
  currentOperatorMedia: CurrentOperatorMediaResult

  """Access restricted to logged in user"""
  currentUserMedia: CurrentUserMediaResult

  """Access restricted to admin users"""
  mediaById(id: ID!): MediaByIdResult

  """Access restricted to admin users"""
  medias: MediasResult

  """Access restricted to admin users"""
  userById(id: ID!): UserByIdResult
}

input ResetPasswordInput {
  newPassword: String!
  token: JWT!
}

"""The result of the resetPassword mutation"""
union ResetPasswordResult = BooleanResult | InvalidArgumentsError | UnableToProcessError

"""The result of the sendVerificationEmail mutation"""
union SendVerificationEmailResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError

input SetBookingMessagesAsReadInput {
  ids: [ID!]!
  readAt: Date
}

"""The result of the setBookingMessageAsRead mutation"""
union SetBookingMessagesAsReadResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError | UserAuthenticationError

type SharedMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  operator: Operator
  operatorId: ID
  storeUrl: URL!
  updatedAt: DateTime
  user: User
  userId: ID
}

"""The result of the signIn mutation"""
union SignInResult = Account | InvalidArgumentsError | NotFoundError | UnableToProcessError

"""The result of the signOut mutation"""
union SignOutResult = BooleanResult | UserAuthenticationError

type StorageInfos {
  signedRequest: String
  url: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type UnableToProcessError {
  code: ErrorCode!
  message: ErrorMessage!
}

input UpdateBookingMessageInput {
  content: String
  readAt: Date
}

union UpdateBookingMessageResult = InvalidArgumentsError | NotFoundError | OperatorBookingMessage | UnableToProcessError | UserAuthenticationError | UserBookingMessage

input UpdateIndividualOperatorInput {
  acceptedSpecieOptionsIds: [ID]
  birthDate: Date
  description: String
  genderOptionId: String
  hostingOptionId: String
  languageOptionIds: [ID]
  mainMediaId: ID
  ownAnimalsSpecieOptionsIds: [ID]
  partnerId: String
  partnerPercentage: Int
  stripeAccountId: ID
}

"""The result of the updateIndividualOperator mutation"""
union UpdateIndividualOperatorResult = IndividualOperator | InvalidArgumentsError | NotFoundError | UnableToProcessError

type User implements Actor & Node {
  accountId: ID
  createdAt: DateTime
  firstName: String!

  """GUID for a resource"""
  id: String!
  lastName: String
  updatedAt: DateTime
}

type UserAuthenticationError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserBookingMessage implements BookingMessage & Node {
  content: String!
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  medias: [Media]
  readAt: DateTime
  updatedAt: DateTime
  user: User
  userId: ID
}

"""The result of the userById query"""
union UserByIdResult = InvalidArgumentsError | NotFoundError | User | UserAuthenticationError | UserForbiddenError

type UserForbiddenError {
  code: ErrorCode!
  message: ErrorMessage!
}

type UserMedia implements Media & Node {
  createdAt: DateTime

  """GUID for a resource"""
  id: String!
  mediaType: MediaType
  storeUrl: URL!
  updatedAt: DateTime
  user: User
  userId: ID
}

"""List of users"""
type UsersList {
  users: [User]
}

input VerifyUserInput {
  token: JWT!
}

"""The result of the verifyUser mutation"""
union VerifyUserResult = BooleanResult | InvalidArgumentsError | NotFoundError | UnableToProcessError
