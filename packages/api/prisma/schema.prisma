generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  email      String    @unique
  password   String
  verifiedAt DateTime?
  user       User?
  admin      Admin?
  operator   Operator?
}

model Admin {
  id                   String           @id @default(cuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())
  account              Account          @relation(fields: [accountId], references: [id])
  accountId            String
  phoneNumber          String // Required for potential 2 factor auth
  createdSpecies       SpecieOption[]
  createdLanguages     LanguageOption[]
  createdHostings      HostingOption[]
  createdGenderOption  GenderOption[]
  createdServiceOption ServiceOption[]
  createdPartners      Partner[]
  medias               Media[]
}

// Actors
model User {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  account          Account          @relation(fields: [accountId], references: [id])
  accountId        String
  firstName        String
  lastName         String?
  stripeCustomerId String?
  reviews          Review[]
  bookings         Booking[]
  bookingMessages  BookingMessage[]
  claims           BookingClaim[]
  medias           Media[]
}

model Operator {
  id                         String                 @id @default(cuid())
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  isActive                   Boolean                @default(true)
  birthDate                  DateTime?              @db.Date
  description                String
  mainMediaId                String // The mediaId of the main displayed image
  acceptedSpecieOptionsIds   String[] // No relations, needed for filtering only
  ownAnimalsSpecieOptionsIds String[] // No relations, needed for filtering only
  languageOptionIds          String[] // No relations, needed for filtering only
  genderOptionId             String? // Needed for filtering, with relation because its possible
  hostingOptionId            String // Needed for filtering, with relation because its possible
  partnerId                  String?
  partnerPercentage          Float?
  stripeAccountId            String?
  calendarUpdate             DateTime?
  averageResponseTime        DateTime?
  accountId                  String                 @unique
  account                    Account                @relation(fields: [accountId], references: [id])
  gender                     GenderOption?          @relation(fields: [genderOptionId], references: [id])
  hosting                    HostingOption?         @relation(fields: [hostingOptionId], references: [id])
  partner                    Partner?               @relation(fields: [partnerId], references: [id])
  location                   Location?
  medias                     Media[]
  reviews                    Review[]
  bookings                   Booking[]
  bookingMessages            BookingMessage[]
  claims                     BookingClaim[]
  coreServices               CoreOperatorService[]
  extraServices              ExtraOperatorService?
  availabilities             OperatorAvailability[]
}

// Actors related informations

model OperatorAvailability {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  operator   Operator @relation(fields: [operatorId], references: [id])
  operatorId String
  date       DateTime @db.Date

  @@index(fields: [date], name: "availability_date_index")
}

model CoreOperatorService {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  operator        Operator      @relation(fields: [operatorId], references: [id])
  operatorId      String
  service         ServiceOption @relation(fields: [serviceOptionId], references: [id])
  serviceOptionId String
  price           Int
}

model ExtraOperatorService {
  id                              String   @id @default(cuid())
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  operator                        Operator @relation(fields: [operatorId], references: [id])
  operatorId                      String
  atHomeExclusivity               Boolean?
  atHomeExlusivityExtraPrice      Int?
  atHomeContinuously              Boolean?
  atHomeContinuouslyExtraPrice    Int?
  atHomeOnlyBringPet              Boolean?
  atHomeOnlyBringPetExtraPrice    Int?
  atHomeComeGetPet                Boolean?
  atHomeComeGetPetExtraPrice      Int?
  atOwnerHomePlantsCare           Boolean?
  atOwnerHomePlantsCareExtraPrice Int?
  atOwnerHomeMail                 Boolean?
  atOwnerHomeMailExtraPrice       Int?
  atOwnerHomeCurtains             Boolean?
  atOwnerHomeCurtainsExtraPrice   Int?
  flexibleCancelation             Boolean?
  abilityToProvideMedicalCare     Boolean?
  acceptShortNotice               Boolean?
  isProfessionalOperator          Boolean?
}

model Partner {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creator     Admin?     @relation(fields: [adminId], references: [id])
  adminId     String?
  name        String
  description String
  websiteUrl  String
  logoUrl     String
  operators   Operator[]
}

model Location {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  address      String
  country      String
  country_code String
  postcode     String
  latitude     Float
  longitude    Float
  operator     Operator @relation(fields: [operatorId], references: [id])
  operatorId   String
}

model Review {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String
  body       String?
  score      Float
  operator   Operator? @relation(fields: [operatorId], references: [id])
  operatorId String?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  booking    Booking   @relation(fields: [bookingId], references: [id])
  bookingId  String
}

// Bookings related infos
model Booking {
  id                         String           @id @default(cuid())
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  startDate                  DateTime         @db.Date
  endDate                    DateTime         @db.Date
  // Price related fields
  selectedOptions            Json[] // The option's name and price at the moment of booking's creation
  priceWithOutApplicationFee Float
  applicationFeeAmount       Float
  animalsIds                 String[]
  // Status related fields
  operatorConfirmationDate   DateTime?
  ownerConfirmationDate      DateTime?
  // Cancelation related fields
  canceled                   Boolean?         @default(false)
  canceledBy                 String?
  canceledReason             String?
  paid                       Boolean          @default(false)
  underReview                Boolean? // Claim related field
  operator                   Operator         @relation(fields: [operatorId], references: [id])
  operatorId                 String
  user                       User             @relation(fields: [userId], references: [id])
  userId                     String
  service                    ServiceOption    @relation(fields: [serviceOptionId], references: [id])
  serviceOptionId            String
  reviews                    Review[]
  messages                   BookingMessage[]
  claims                     BookingClaim[]
  stripePayment              StripePayment?
}

model BookingMessage {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  readAt     DateTime?
  booking    Booking   @relation(fields: [bookingId], references: [id])
  bookingId  String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  operator   Operator? @relation(fields: [operatorId], references: [id])
  operatorId String?
  medias     Media[]
}

model BookingClaim {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reason     String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  operator   Operator? @relation(fields: [operatorId], references: [id])
  operatorId String?
  booking    Booking   @relation(fields: [bookingId], references: [id])
  bookingId  String
}

enum PaymentStatus {
  PENDING_AUTHORIZATION
  SETUP_INTENT_PENDING_CONFIRMATION
  SETUP_INTENT_CONFIRMED_REQUIRED_PAYMENT_INTENT_CREATION
  FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS
  FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED
  FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR
  FAILED_PAYMENT_INTENT_CREATION_AUTH_REQUIRED_MAIL_SENT
  FAILED_PAYMENT_INTENT_CREATION_INSUFFICIENT_FUNDS_MAIL_SENT
  FAILED_PAYMENT_INTENT_CREATION_UNKOWN_ERROR_MAIL_SENT
  ERROR_SENDING_AUTH_REQUIRED_MAIL
  ERROR_SENDING_INSUFFICIENT_FUNDS_MAIL
  ERROR_SENDING_UNKOWN_ERROR_MAIL
  AUTHORIZED_REQUIRE_CAPTURE
  AUTHORIZED_BUT_CANCELLED
  CAPTURED_AND_PAID
  FAILED_CAPTURE
}

model StripePayment {
  id                                String        @id @default(cuid())
  createdAt                         DateTime      @default(now())
  updatedAt                         DateTime      @updatedAt
  booking                           Booking       @relation(fields: [bookingId], references: [id])
  bookingId                         String
  setupIntentClientSecret           String?
  setupIntentId                     String?
  setupIntentCreationDate           DateTime?
  paymentIntentClientSecret         String?
  paymentIntentId                   String?
  paymentIntentCreationDate         DateTime?
  // For queued payments: setupIntent -> queue -> paymentIntent created 2 days before booking's end
  expectedPaymentIntentCreationDate DateTime?
  paymentMethodId                   String?
  status                            PaymentStatus
  errorCode                         String?
}

// Transversal

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  storeUrl         String
  mediaType        MediaType       @default(IMAGE)
  // The user pictures
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?
  // The operator pictures
  operator         Operator?       @relation(fields: [operatorId], references: [id])
  operatorId       String?
  // Booking specific media (picture or video sent to the owner by the chat for example)
  bookingMessage   BookingMessage? @relation(fields: [bookingMessageId], references: [id])
  bookingMessageId String?
  adminId          String?
  admin            Admin?          @relation(fields: [adminId], references: [id])
  languageOptionId String?
  languageOption   LanguageOption? @relation(fields: [languageOptionId], references: [id])
}

// Options
model SpecieOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
}

model LanguageOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
  media     Media?
}

model HostingOption {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  creator   Admin?     @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
  operators Operator[]
}

model GenderOption {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  creator   Admin?     @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
  operators Operator[]
}

model ServiceOption {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  creator              Admin?                @relation(fields: [adminId], references: [id])
  adminId              String?
  nameEn               String
  nameFr               String
  bookings             Booking[]
  coreOperatorServices CoreOperatorService[]
}
