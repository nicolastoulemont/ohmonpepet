generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  verifiedAt DateTime?
  user       User?
  admin      Admin?
}

model Admin {
  id                   String           @id @default(cuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())
  account              Account?         @relation(fields: [accountId], references: [id])
  accountId            String?
  phoneNumber          String // Required for potential 2 factor auth
  createdSpecies       SpecieOption[]
  createdLanguages     LanguageOption[]
  createdHostings      HostingOption[]
  createdGenderOption  GenderOption[]
  createdServiceOption ServiceOption[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  username  String?
}

model SpecieOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  creator   Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
}

model LanguageOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  creator   Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
  iconUrl   String
}

model HostingOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  creator   Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
}

model GenderOption {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  creator   Admin?   @relation(fields: [adminId], references: [id])
  adminId   String?
  nameEn    String
  nameFr    String
}

model ServiceOption {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  creator            Admin?   @relation(fields: [adminId], references: [id])
  adminId            String?
  userFacingNameEn   String
  userFacingNameFr   String
  sitterFacingNameEn String
  sitterFacingNameFr String
}
